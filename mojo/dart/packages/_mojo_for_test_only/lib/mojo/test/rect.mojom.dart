// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library rect_mojom;
import 'dart:collection';
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/mojo/bindings/types/mojom_types.mojom.dart' as mojom_types;




class Rect extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int x = 0;
  int y = 0;
  int width = 0;
  int height = 0;

  Rect() : super(kVersions.last.size);

  Rect.init(
    int this.x, 
    int this.y, 
    int this.width, 
    int this.height
  ) : super(kVersions.last.size);

  static Rect deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static Rect decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    Rect result = new Rect();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.x = decoder0.decodeInt32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.y = decoder0.decodeInt32(12);
    }
    if (mainDataHeader.version >= 0) {
      
      result.width = decoder0.decodeInt32(16);
    }
    if (mainDataHeader.version >= 0) {
      
      result.height = decoder0.decodeInt32(20);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "Rect";
    String fieldName;
    try {
      fieldName = "x";
      encoder0.encodeInt32(x, 8);
      fieldName = "y";
      encoder0.encodeInt32(y, 12);
      fieldName = "width";
      encoder0.encodeInt32(width, 16);
      fieldName = "height";
      encoder0.encodeInt32(height, 20);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "Rect("
           "x: $x" ", "
           "y: $y" ", "
           "width: $width" ", "
           "height: $height" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["x"] = x;
    map["y"] = y;
    map["width"] = width;
    map["height"] = height;
    return map;
  }
}


mojom_types.RuntimeTypeInfo getRuntimeTypeInfo() => _runtimeTypeInfo ??
    _initRuntimeTypeInfo();

Map<String, mojom_types.UserDefinedType> getAllMojomTypeDefinitions() {
  return getRuntimeTypeInfo().typeMap;
}

var _runtimeTypeInfo;
mojom_types.RuntimeTypeInfo  _initRuntimeTypeInfo() {
  // serializedRuntimeTypeInfo contains the bytes of the Mojo serialization of
  // a mojom_types.RuntimeTypeInfo struct describing the Mojom types in this
  // file. The string contains the base64 encoding of the gzip-compressed bytes.
  var serializedRuntimeTypeInfo = "H4sIAAAJbogC/8yUzU/CQBDFWz4UFI0n5aZHTh2OxJMXTl6M8SAHY6Cs7ZK2S7qLH/+5N52l06SMLcEeCC95GUpmZ9/+oNt3Ml1QHVLl3+e1wyrvGxWe3ULfNfoK/TR5GL/ejye3sVoozwhtvEfhm/Uct2TdDdvnm+pzO6t3zqaGLMcPiffl6qFb6HUI1CX6HM3i/TmnzXeMFugXNKx0CpHypxEESgWRgFDFAt5NBMtULXCGBjsTdOpnH5arWSR9kIkR6dvUFxpmMpnLJNBg99WQ4iLPtsY4f0A5cx4Dl87boPM2N3mMWN62s5uqeDoFng7lKVOXfr/Piv9Hl9jti9t/ebRq8HB34PFVwePkwHl0avBobOFxRnt9yLkJS3icHjiPXg0ezS087F1zhA6FDMKSe6a3Zx78/u2zdyN//g0AAP//kFBEfDgGAAA=";

  // Deserialize RuntimeTypeInfo
  var bytes = BASE64.decode(serializedRuntimeTypeInfo);
  var unzippedBytes = new ZLibDecoder().convert(bytes);
  var bdata = new ByteData.view(unzippedBytes.buffer);
  var message = new bindings.Message(bdata, null, unzippedBytes.length, 0);
  _runtimeTypeInfo = mojom_types.RuntimeTypeInfo.deserialize(message);
  return _runtimeTypeInfo;
}
