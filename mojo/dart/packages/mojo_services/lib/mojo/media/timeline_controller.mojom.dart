// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library timeline_controller_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/timelines.mojom.dart' as timelines_mojom;



class MediaTimelineControlPointStatus extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  timelines_mojom.TimelineTransform timelineTransform = null;
  bool endOfStream = false;

  MediaTimelineControlPointStatus() : super(kVersions.last.size);

  MediaTimelineControlPointStatus.init(
    timelines_mojom.TimelineTransform this.timelineTransform, 
    bool this.endOfStream
  ) : super(kVersions.last.size);

  static MediaTimelineControlPointStatus deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaTimelineControlPointStatus decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaTimelineControlPointStatus result = new MediaTimelineControlPointStatus();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.timelineTransform = timelines_mojom.TimelineTransform.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.endOfStream = decoder0.decodeBool(16, 0);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaTimelineControlPointStatus";
    String fieldName;
    try {
      fieldName = "timelineTransform";
      encoder0.encodeStruct(timelineTransform, 8, false);
      fieldName = "endOfStream";
      encoder0.encodeBool(endOfStream, 16, 0);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaTimelineControlPointStatus("
           "timelineTransform: $timelineTransform" ", "
           "endOfStream: $endOfStream" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["timelineTransform"] = timelineTransform;
    map["endOfStream"] = endOfStream;
    return map;
  }
}


class _MediaTimelineControllerAddControlPointParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaTimelineControlPointInterface controlPoint = null;

  _MediaTimelineControllerAddControlPointParams() : super(kVersions.last.size);

  _MediaTimelineControllerAddControlPointParams.init(
    MediaTimelineControlPointInterface this.controlPoint
  ) : super(kVersions.last.size);

  static _MediaTimelineControllerAddControlPointParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaTimelineControllerAddControlPointParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaTimelineControllerAddControlPointParams result = new _MediaTimelineControllerAddControlPointParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.controlPoint = decoder0.decodeServiceInterface(8, false, MediaTimelineControlPointProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaTimelineControllerAddControlPointParams";
    String fieldName;
    try {
      fieldName = "controlPoint";
      encoder0.encodeInterface(controlPoint, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaTimelineControllerAddControlPointParams("
           "controlPoint: $controlPoint" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _MediaTimelineControllerGetControlPointParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaTimelineControlPointInterfaceRequest controlPoint = null;

  _MediaTimelineControllerGetControlPointParams() : super(kVersions.last.size);

  _MediaTimelineControllerGetControlPointParams.init(
    MediaTimelineControlPointInterfaceRequest this.controlPoint
  ) : super(kVersions.last.size);

  static _MediaTimelineControllerGetControlPointParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaTimelineControllerGetControlPointParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaTimelineControllerGetControlPointParams result = new _MediaTimelineControllerGetControlPointParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.controlPoint = decoder0.decodeInterfaceRequest(8, false, MediaTimelineControlPointStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaTimelineControllerGetControlPointParams";
    String fieldName;
    try {
      fieldName = "controlPoint";
      encoder0.encodeInterfaceRequest(controlPoint, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaTimelineControllerGetControlPointParams("
           "controlPoint: $controlPoint" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _MediaTimelineControlPointGetStatusParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int versionLastSeen = 0;

  _MediaTimelineControlPointGetStatusParams() : super(kVersions.last.size);

  _MediaTimelineControlPointGetStatusParams.init(
    int this.versionLastSeen
  ) : super(kVersions.last.size);

  static _MediaTimelineControlPointGetStatusParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaTimelineControlPointGetStatusParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaTimelineControlPointGetStatusParams result = new _MediaTimelineControlPointGetStatusParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.versionLastSeen = decoder0.decodeUint64(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaTimelineControlPointGetStatusParams";
    String fieldName;
    try {
      fieldName = "versionLastSeen";
      encoder0.encodeUint64(versionLastSeen, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaTimelineControlPointGetStatusParams("
           "versionLastSeen: $versionLastSeen" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["versionLastSeen"] = versionLastSeen;
    return map;
  }
}


class MediaTimelineControlPointGetStatusResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int version = 0;
  MediaTimelineControlPointStatus status = null;

  MediaTimelineControlPointGetStatusResponseParams() : super(kVersions.last.size);

  MediaTimelineControlPointGetStatusResponseParams.init(
    int this.version, 
    MediaTimelineControlPointStatus this.status
  ) : super(kVersions.last.size);

  static MediaTimelineControlPointGetStatusResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaTimelineControlPointGetStatusResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaTimelineControlPointGetStatusResponseParams result = new MediaTimelineControlPointGetStatusResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.version = decoder0.decodeUint64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.status = MediaTimelineControlPointStatus.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaTimelineControlPointGetStatusResponseParams";
    String fieldName;
    try {
      fieldName = "version";
      encoder0.encodeUint64(version, 8);
      fieldName = "status";
      encoder0.encodeStruct(status, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaTimelineControlPointGetStatusResponseParams("
           "version: $version" ", "
           "status: $status" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["version"] = version;
    map["status"] = status;
    return map;
  }
}


class _MediaTimelineControlPointGetTimelineConsumerParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  timelines_mojom.TimelineConsumerInterfaceRequest timelineConsumer = null;

  _MediaTimelineControlPointGetTimelineConsumerParams() : super(kVersions.last.size);

  _MediaTimelineControlPointGetTimelineConsumerParams.init(
    timelines_mojom.TimelineConsumerInterfaceRequest this.timelineConsumer
  ) : super(kVersions.last.size);

  static _MediaTimelineControlPointGetTimelineConsumerParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaTimelineControlPointGetTimelineConsumerParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaTimelineControlPointGetTimelineConsumerParams result = new _MediaTimelineControlPointGetTimelineConsumerParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.timelineConsumer = decoder0.decodeInterfaceRequest(8, false, timelines_mojom.TimelineConsumerStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaTimelineControlPointGetTimelineConsumerParams";
    String fieldName;
    try {
      fieldName = "timelineConsumer";
      encoder0.encodeInterfaceRequest(timelineConsumer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaTimelineControlPointGetTimelineConsumerParams("
           "timelineConsumer: $timelineConsumer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _mediaTimelineControllerMethodAddControlPointName = 0;
const int _mediaTimelineControllerMethodGetControlPointName = 1;

class _MediaTimelineControllerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaTimelineController {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaTimelineControllerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaTimelineControllerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaTimelineControllerProxy p = new MediaTimelineControllerProxy.unbound();
    String name = serviceName ?? MediaTimelineController.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void addControlPoint(MediaTimelineControlPointInterface controlPoint);
  void getControlPoint(MediaTimelineControlPointInterfaceRequest controlPoint);
}

abstract class MediaTimelineControllerInterface
    implements bindings.MojoInterface<MediaTimelineController>,
               MediaTimelineController {
  factory MediaTimelineControllerInterface([MediaTimelineController impl]) =>
      new MediaTimelineControllerStub.unbound(impl);

  factory MediaTimelineControllerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaTimelineController impl]) =>
      new MediaTimelineControllerStub.fromEndpoint(endpoint, impl);

  factory MediaTimelineControllerInterface.fromMock(
      MediaTimelineController mock) =>
      new MediaTimelineControllerProxy.fromMock(mock);
}

abstract class MediaTimelineControllerInterfaceRequest
    implements bindings.MojoInterface<MediaTimelineController>,
               MediaTimelineController {
  factory MediaTimelineControllerInterfaceRequest() =>
      new MediaTimelineControllerProxy.unbound();
}

class _MediaTimelineControllerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaTimelineController> {
  MediaTimelineController impl;

  _MediaTimelineControllerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaTimelineControllerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaTimelineControllerProxyControl.unbound() : super.unbound();

  String get serviceName => MediaTimelineController.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaTimelineControllerProxyControl($superString)";
  }
}

class MediaTimelineControllerProxy
    extends bindings.Proxy<MediaTimelineController>
    implements MediaTimelineController,
               MediaTimelineControllerInterface,
               MediaTimelineControllerInterfaceRequest {
  MediaTimelineControllerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaTimelineControllerProxyControl.fromEndpoint(endpoint));

  MediaTimelineControllerProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaTimelineControllerProxyControl.fromHandle(handle));

  MediaTimelineControllerProxy.unbound()
      : super(new _MediaTimelineControllerProxyControl.unbound());

  factory MediaTimelineControllerProxy.fromMock(MediaTimelineController mock) {
    MediaTimelineControllerProxy newMockedProxy =
        new MediaTimelineControllerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaTimelineControllerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaTimelineControllerProxy"));
    return new MediaTimelineControllerProxy.fromEndpoint(endpoint);
  }


  void addControlPoint(MediaTimelineControlPointInterface controlPoint) {
    if (impl != null) {
      impl.addControlPoint(controlPoint);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaTimelineControllerAddControlPointParams();
    params.controlPoint = controlPoint;
    ctrl.sendMessage(params,
        _mediaTimelineControllerMethodAddControlPointName);
  }
  void getControlPoint(MediaTimelineControlPointInterfaceRequest controlPoint) {
    if (impl != null) {
      impl.getControlPoint(controlPoint);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaTimelineControllerGetControlPointParams();
    params.controlPoint = controlPoint;
    ctrl.sendMessage(params,
        _mediaTimelineControllerMethodGetControlPointName);
  }
}

class _MediaTimelineControllerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaTimelineController> {
  MediaTimelineController _impl;

  _MediaTimelineControllerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaTimelineController impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaTimelineControllerStubControl.fromHandle(
      core.MojoHandle handle, [MediaTimelineController impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaTimelineControllerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaTimelineController.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaTimelineControllerMethodAddControlPointName:
        var params = _MediaTimelineControllerAddControlPointParams.deserialize(
            message.payload);
        _impl.addControlPoint(params.controlPoint);
        break;
      case _mediaTimelineControllerMethodGetControlPointName:
        var params = _MediaTimelineControllerGetControlPointParams.deserialize(
            message.payload);
        _impl.getControlPoint(params.controlPoint);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaTimelineController get impl => _impl;
  set impl(MediaTimelineController d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaTimelineControllerStubControl($superString)";
  }

  int get version => 0;
}

class MediaTimelineControllerStub
    extends bindings.Stub<MediaTimelineController>
    implements MediaTimelineController,
               MediaTimelineControllerInterface,
               MediaTimelineControllerInterfaceRequest {
  MediaTimelineControllerStub.unbound([MediaTimelineController impl])
      : super(new _MediaTimelineControllerStubControl.unbound(impl));

  MediaTimelineControllerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaTimelineController impl])
      : super(new _MediaTimelineControllerStubControl.fromEndpoint(endpoint, impl));

  MediaTimelineControllerStub.fromHandle(
      core.MojoHandle handle, [MediaTimelineController impl])
      : super(new _MediaTimelineControllerStubControl.fromHandle(handle, impl));

  static MediaTimelineControllerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaTimelineControllerStub"));
    return new MediaTimelineControllerStub.fromEndpoint(endpoint);
  }


  void addControlPoint(MediaTimelineControlPointInterface controlPoint) {
    return impl.addControlPoint(controlPoint);
  }
  void getControlPoint(MediaTimelineControlPointInterfaceRequest controlPoint) {
    return impl.getControlPoint(controlPoint);
  }
}

const int _mediaTimelineControlPointMethodGetStatusName = 0;
const int _mediaTimelineControlPointMethodGetTimelineConsumerName = 1;

class _MediaTimelineControlPointServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaTimelineControlPoint {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaTimelineControlPointServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaTimelineControlPointProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaTimelineControlPointProxy p = new MediaTimelineControlPointProxy.unbound();
    String name = serviceName ?? MediaTimelineControlPoint.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void getStatus(int versionLastSeen,void callback(int version, MediaTimelineControlPointStatus status));
  void getTimelineConsumer(timelines_mojom.TimelineConsumerInterfaceRequest timelineConsumer);
  static const int kInitialStatus = 0;
}

abstract class MediaTimelineControlPointInterface
    implements bindings.MojoInterface<MediaTimelineControlPoint>,
               MediaTimelineControlPoint {
  factory MediaTimelineControlPointInterface([MediaTimelineControlPoint impl]) =>
      new MediaTimelineControlPointStub.unbound(impl);

  factory MediaTimelineControlPointInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaTimelineControlPoint impl]) =>
      new MediaTimelineControlPointStub.fromEndpoint(endpoint, impl);

  factory MediaTimelineControlPointInterface.fromMock(
      MediaTimelineControlPoint mock) =>
      new MediaTimelineControlPointProxy.fromMock(mock);
}

abstract class MediaTimelineControlPointInterfaceRequest
    implements bindings.MojoInterface<MediaTimelineControlPoint>,
               MediaTimelineControlPoint {
  factory MediaTimelineControlPointInterfaceRequest() =>
      new MediaTimelineControlPointProxy.unbound();
}

class _MediaTimelineControlPointProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaTimelineControlPoint> {
  MediaTimelineControlPoint impl;

  _MediaTimelineControlPointProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaTimelineControlPointProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaTimelineControlPointProxyControl.unbound() : super.unbound();

  String get serviceName => MediaTimelineControlPoint.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaTimelineControlPointMethodGetStatusName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaTimelineControlPointGetStatusResponseParams.deserialize(
              message.payload);
          callback(r.version , r.status );
        }
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaTimelineControlPointProxyControl($superString)";
  }
}

class MediaTimelineControlPointProxy
    extends bindings.Proxy<MediaTimelineControlPoint>
    implements MediaTimelineControlPoint,
               MediaTimelineControlPointInterface,
               MediaTimelineControlPointInterfaceRequest {
  MediaTimelineControlPointProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaTimelineControlPointProxyControl.fromEndpoint(endpoint));

  MediaTimelineControlPointProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaTimelineControlPointProxyControl.fromHandle(handle));

  MediaTimelineControlPointProxy.unbound()
      : super(new _MediaTimelineControlPointProxyControl.unbound());

  factory MediaTimelineControlPointProxy.fromMock(MediaTimelineControlPoint mock) {
    MediaTimelineControlPointProxy newMockedProxy =
        new MediaTimelineControlPointProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaTimelineControlPointProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaTimelineControlPointProxy"));
    return new MediaTimelineControlPointProxy.fromEndpoint(endpoint);
  }


  void getStatus(int versionLastSeen,void callback(int version, MediaTimelineControlPointStatus status)) {
    if (impl != null) {
      impl.getStatus(versionLastSeen,callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaTimelineControlPointGetStatusParams();
    params.versionLastSeen = versionLastSeen;
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((int version, MediaTimelineControlPointStatus status) {
        z.bindCallback(() {
          callback(version, status);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaTimelineControlPointMethodGetStatusName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getTimelineConsumer(timelines_mojom.TimelineConsumerInterfaceRequest timelineConsumer) {
    if (impl != null) {
      impl.getTimelineConsumer(timelineConsumer);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaTimelineControlPointGetTimelineConsumerParams();
    params.timelineConsumer = timelineConsumer;
    ctrl.sendMessage(params,
        _mediaTimelineControlPointMethodGetTimelineConsumerName);
  }
}

class _MediaTimelineControlPointStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaTimelineControlPoint> {
  MediaTimelineControlPoint _impl;

  _MediaTimelineControlPointStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaTimelineControlPoint impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaTimelineControlPointStubControl.fromHandle(
      core.MojoHandle handle, [MediaTimelineControlPoint impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaTimelineControlPointStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaTimelineControlPoint.serviceName;


  Function _mediaTimelineControlPointGetStatusResponseParamsResponder(
      int requestId) {
  return (int version, MediaTimelineControlPointStatus status) {
      var result = new MediaTimelineControlPointGetStatusResponseParams();
      result.version = version;
      result.status = status;
      sendResponse(buildResponseWithId(
          result,
          _mediaTimelineControlPointMethodGetStatusName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaTimelineControlPointMethodGetStatusName:
        var params = _MediaTimelineControlPointGetStatusParams.deserialize(
            message.payload);
        _impl.getStatus(params.versionLastSeen, _mediaTimelineControlPointGetStatusResponseParamsResponder(message.header.requestId));
        break;
      case _mediaTimelineControlPointMethodGetTimelineConsumerName:
        var params = _MediaTimelineControlPointGetTimelineConsumerParams.deserialize(
            message.payload);
        _impl.getTimelineConsumer(params.timelineConsumer);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaTimelineControlPoint get impl => _impl;
  set impl(MediaTimelineControlPoint d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaTimelineControlPointStubControl($superString)";
  }

  int get version => 0;
}

class MediaTimelineControlPointStub
    extends bindings.Stub<MediaTimelineControlPoint>
    implements MediaTimelineControlPoint,
               MediaTimelineControlPointInterface,
               MediaTimelineControlPointInterfaceRequest {
  MediaTimelineControlPointStub.unbound([MediaTimelineControlPoint impl])
      : super(new _MediaTimelineControlPointStubControl.unbound(impl));

  MediaTimelineControlPointStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaTimelineControlPoint impl])
      : super(new _MediaTimelineControlPointStubControl.fromEndpoint(endpoint, impl));

  MediaTimelineControlPointStub.fromHandle(
      core.MojoHandle handle, [MediaTimelineControlPoint impl])
      : super(new _MediaTimelineControlPointStubControl.fromHandle(handle, impl));

  static MediaTimelineControlPointStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaTimelineControlPointStub"));
    return new MediaTimelineControlPointStub.fromEndpoint(endpoint);
  }


  void getStatus(int versionLastSeen,void callback(int version, MediaTimelineControlPointStatus status)) {
    return impl.getStatus(versionLastSeen,callback);
  }
  void getTimelineConsumer(timelines_mojom.TimelineConsumerInterfaceRequest timelineConsumer) {
    return impl.getTimelineConsumer(timelineConsumer);
  }
}



