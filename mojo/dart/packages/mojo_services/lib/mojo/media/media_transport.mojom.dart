// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_transport_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class MediaPacket extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  static const int kNoTimestamp = 9223372036854775807;
  int pts = 9223372036854775807;
  bool endOfStream = false;
  int payloadBufferId = 0;
  int payloadOffset = 0;
  int payloadSize = 0;

  MediaPacket() : super(kVersions.last.size);

  MediaPacket.init(
    int this.pts, 
    bool this.endOfStream, 
    int this.payloadBufferId, 
    int this.payloadOffset, 
    int this.payloadSize
  ) : super(kVersions.last.size);

  static MediaPacket deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacket decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacket result = new MediaPacket();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.pts = decoder0.decodeInt64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.endOfStream = decoder0.decodeBool(16, 0);
    }
    if (mainDataHeader.version >= 0) {
      
      result.payloadBufferId = decoder0.decodeUint32(20);
    }
    if (mainDataHeader.version >= 0) {
      
      result.payloadOffset = decoder0.decodeUint64(24);
    }
    if (mainDataHeader.version >= 0) {
      
      result.payloadSize = decoder0.decodeUint64(32);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacket";
    String fieldName;
    try {
      fieldName = "pts";
      encoder0.encodeInt64(pts, 8);
      fieldName = "endOfStream";
      encoder0.encodeBool(endOfStream, 16, 0);
      fieldName = "payloadBufferId";
      encoder0.encodeUint32(payloadBufferId, 20);
      fieldName = "payloadOffset";
      encoder0.encodeUint64(payloadOffset, 24);
      fieldName = "payloadSize";
      encoder0.encodeUint64(payloadSize, 32);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacket("
           "pts: $pts" ", "
           "endOfStream: $endOfStream" ", "
           "payloadBufferId: $payloadBufferId" ", "
           "payloadOffset: $payloadOffset" ", "
           "payloadSize: $payloadSize" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["pts"] = pts;
    map["endOfStream"] = endOfStream;
    map["payloadBufferId"] = payloadBufferId;
    map["payloadOffset"] = payloadOffset;
    map["payloadSize"] = payloadSize;
    return map;
  }
}


class MediaPacketDemand extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int minPacketsOutstanding = 0;
  int minPts = 9223372036854775807;

  MediaPacketDemand() : super(kVersions.last.size);

  MediaPacketDemand.init(
    int this.minPacketsOutstanding, 
    int this.minPts
  ) : super(kVersions.last.size);

  static MediaPacketDemand deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketDemand decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketDemand result = new MediaPacketDemand();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.minPacketsOutstanding = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.minPts = decoder0.decodeInt64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketDemand";
    String fieldName;
    try {
      fieldName = "minPacketsOutstanding";
      encoder0.encodeUint32(minPacketsOutstanding, 8);
      fieldName = "minPts";
      encoder0.encodeInt64(minPts, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketDemand("
           "minPacketsOutstanding: $minPacketsOutstanding" ", "
           "minPts: $minPts" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["minPacketsOutstanding"] = minPacketsOutstanding;
    map["minPts"] = minPts;
    return map;
  }
}


class _MediaPacketProducerConnectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacketConsumerInterface consumer = null;

  _MediaPacketProducerConnectParams() : super(kVersions.last.size);

  _MediaPacketProducerConnectParams.init(
    MediaPacketConsumerInterface this.consumer
  ) : super(kVersions.last.size);

  static _MediaPacketProducerConnectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerConnectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerConnectParams result = new _MediaPacketProducerConnectParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.consumer = decoder0.decodeServiceInterface(8, false, MediaPacketConsumerProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerConnectParams";
    String fieldName;
    try {
      fieldName = "consumer";
      encoder0.encodeInterface(consumer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerConnectParams("
           "consumer: $consumer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class MediaPacketProducerConnectResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaPacketProducerConnectResponseParams() : super(kVersions.last.size);

  MediaPacketProducerConnectResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaPacketProducerConnectResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketProducerConnectResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketProducerConnectResponseParams result = new MediaPacketProducerConnectResponseParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketProducerConnectResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketProducerConnectResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketProducerDisconnectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketProducerDisconnectParams() : super(kVersions.last.size);

  _MediaPacketProducerDisconnectParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketProducerDisconnectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerDisconnectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerDisconnectParams result = new _MediaPacketProducerDisconnectParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerDisconnectParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerDisconnectParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerPullDemandUpdateParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerPullDemandUpdateParams() : super(kVersions.last.size);

  _MediaPacketConsumerPullDemandUpdateParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerPullDemandUpdateParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerPullDemandUpdateParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerPullDemandUpdateParams result = new _MediaPacketConsumerPullDemandUpdateParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerPullDemandUpdateParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerPullDemandUpdateParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaPacketConsumerPullDemandUpdateResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacketDemand demand = null;

  MediaPacketConsumerPullDemandUpdateResponseParams() : super(kVersions.last.size);

  MediaPacketConsumerPullDemandUpdateResponseParams.init(
    MediaPacketDemand this.demand
  ) : super(kVersions.last.size);

  static MediaPacketConsumerPullDemandUpdateResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketConsumerPullDemandUpdateResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketConsumerPullDemandUpdateResponseParams result = new MediaPacketConsumerPullDemandUpdateResponseParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.demand = MediaPacketDemand.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketConsumerPullDemandUpdateResponseParams";
    String fieldName;
    try {
      fieldName = "demand";
      encoder0.encodeStruct(demand, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketConsumerPullDemandUpdateResponseParams("
           "demand: $demand" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["demand"] = demand;
    return map;
  }
}


class _MediaPacketConsumerAddPayloadBufferParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int payloadBufferId = 0;
  core.MojoSharedBuffer payloadBuffer = null;

  _MediaPacketConsumerAddPayloadBufferParams() : super(kVersions.last.size);

  _MediaPacketConsumerAddPayloadBufferParams.init(
    int this.payloadBufferId, 
    core.MojoSharedBuffer this.payloadBuffer
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerAddPayloadBufferParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerAddPayloadBufferParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerAddPayloadBufferParams result = new _MediaPacketConsumerAddPayloadBufferParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.payloadBufferId = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.payloadBuffer = decoder0.decodeSharedBufferHandle(12, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerAddPayloadBufferParams";
    String fieldName;
    try {
      fieldName = "payloadBufferId";
      encoder0.encodeUint32(payloadBufferId, 8);
      fieldName = "payloadBuffer";
      encoder0.encodeSharedBufferHandle(payloadBuffer, 12, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerAddPayloadBufferParams("
           "payloadBufferId: $payloadBufferId" ", "
           "payloadBuffer: $payloadBuffer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _MediaPacketConsumerRemovePayloadBufferParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int payloadBufferId = 0;

  _MediaPacketConsumerRemovePayloadBufferParams() : super(kVersions.last.size);

  _MediaPacketConsumerRemovePayloadBufferParams.init(
    int this.payloadBufferId
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerRemovePayloadBufferParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerRemovePayloadBufferParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerRemovePayloadBufferParams result = new _MediaPacketConsumerRemovePayloadBufferParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.payloadBufferId = decoder0.decodeUint32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerRemovePayloadBufferParams";
    String fieldName;
    try {
      fieldName = "payloadBufferId";
      encoder0.encodeUint32(payloadBufferId, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerRemovePayloadBufferParams("
           "payloadBufferId: $payloadBufferId" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["payloadBufferId"] = payloadBufferId;
    return map;
  }
}


class _MediaPacketConsumerSupplyPacketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacket packet = null;

  _MediaPacketConsumerSupplyPacketParams() : super(kVersions.last.size);

  _MediaPacketConsumerSupplyPacketParams.init(
    MediaPacket this.packet
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerSupplyPacketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerSupplyPacketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerSupplyPacketParams result = new _MediaPacketConsumerSupplyPacketParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.packet = MediaPacket.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerSupplyPacketParams";
    String fieldName;
    try {
      fieldName = "packet";
      encoder0.encodeStruct(packet, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerSupplyPacketParams("
           "packet: $packet" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["packet"] = packet;
    return map;
  }
}


class MediaPacketConsumerSupplyPacketResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacketDemand demand = null;

  MediaPacketConsumerSupplyPacketResponseParams() : super(kVersions.last.size);

  MediaPacketConsumerSupplyPacketResponseParams.init(
    MediaPacketDemand this.demand
  ) : super(kVersions.last.size);

  static MediaPacketConsumerSupplyPacketResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketConsumerSupplyPacketResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketConsumerSupplyPacketResponseParams result = new MediaPacketConsumerSupplyPacketResponseParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.demand = MediaPacketDemand.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketConsumerSupplyPacketResponseParams";
    String fieldName;
    try {
      fieldName = "demand";
      encoder0.encodeStruct(demand, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketConsumerSupplyPacketResponseParams("
           "demand: $demand" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["demand"] = demand;
    return map;
  }
}


class _MediaPacketConsumerPrimeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerPrimeParams() : super(kVersions.last.size);

  _MediaPacketConsumerPrimeParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerPrimeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerPrimeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerPrimeParams result = new _MediaPacketConsumerPrimeParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerPrimeParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerPrimeParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaPacketConsumerPrimeResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaPacketConsumerPrimeResponseParams() : super(kVersions.last.size);

  MediaPacketConsumerPrimeResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaPacketConsumerPrimeResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketConsumerPrimeResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketConsumerPrimeResponseParams result = new MediaPacketConsumerPrimeResponseParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketConsumerPrimeResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketConsumerPrimeResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerFlushParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerFlushParams() : super(kVersions.last.size);

  _MediaPacketConsumerFlushParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerFlushParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerFlushParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerFlushParams result = new _MediaPacketConsumerFlushParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerFlushParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerFlushParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaPacketConsumerFlushResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaPacketConsumerFlushResponseParams() : super(kVersions.last.size);

  MediaPacketConsumerFlushResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaPacketConsumerFlushResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketConsumerFlushResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketConsumerFlushResponseParams result = new MediaPacketConsumerFlushResponseParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketConsumerFlushResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketConsumerFlushResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _mediaPacketProducerMethodConnectName = 0;
const int _mediaPacketProducerMethodDisconnectName = 1;

class _MediaPacketProducerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaPacketProducer {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaPacketProducerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaPacketProducerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaPacketProducerProxy p = new MediaPacketProducerProxy.unbound();
    String name = serviceName ?? MediaPacketProducer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void connect(MediaPacketConsumerInterface consumer,void callback());
  void disconnect();
}

abstract class MediaPacketProducerInterface
    implements bindings.MojoInterface<MediaPacketProducer>,
               MediaPacketProducer {
  factory MediaPacketProducerInterface([MediaPacketProducer impl]) =>
      new MediaPacketProducerStub.unbound(impl);

  factory MediaPacketProducerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaPacketProducer impl]) =>
      new MediaPacketProducerStub.fromEndpoint(endpoint, impl);

  factory MediaPacketProducerInterface.fromMock(
      MediaPacketProducer mock) =>
      new MediaPacketProducerProxy.fromMock(mock);
}

abstract class MediaPacketProducerInterfaceRequest
    implements bindings.MojoInterface<MediaPacketProducer>,
               MediaPacketProducer {
  factory MediaPacketProducerInterfaceRequest() =>
      new MediaPacketProducerProxy.unbound();
}

class _MediaPacketProducerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaPacketProducer> {
  MediaPacketProducer impl;

  _MediaPacketProducerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaPacketProducerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaPacketProducerProxyControl.unbound() : super.unbound();

  String get serviceName => MediaPacketProducer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaPacketProducerMethodConnectName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketProducerConnectResponseParams.deserialize(
              message.payload);
          callback();
        }
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketProducerProxyControl($superString)";
  }
}

class MediaPacketProducerProxy
    extends bindings.Proxy<MediaPacketProducer>
    implements MediaPacketProducer,
               MediaPacketProducerInterface,
               MediaPacketProducerInterfaceRequest {
  MediaPacketProducerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaPacketProducerProxyControl.fromEndpoint(endpoint));

  MediaPacketProducerProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaPacketProducerProxyControl.fromHandle(handle));

  MediaPacketProducerProxy.unbound()
      : super(new _MediaPacketProducerProxyControl.unbound());

  factory MediaPacketProducerProxy.fromMock(MediaPacketProducer mock) {
    MediaPacketProducerProxy newMockedProxy =
        new MediaPacketProducerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaPacketProducerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketProducerProxy"));
    return new MediaPacketProducerProxy.fromEndpoint(endpoint);
  }


  void connect(MediaPacketConsumerInterface consumer,void callback()) {
    if (impl != null) {
      impl.connect(consumer,callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketProducerConnectParams();
    params.consumer = consumer;
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketProducerMethodConnectName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void disconnect() {
    if (impl != null) {
      impl.disconnect();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerDisconnectParams();
    ctrl.sendMessage(params,
        _mediaPacketProducerMethodDisconnectName);
  }
}

class _MediaPacketProducerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaPacketProducer> {
  MediaPacketProducer _impl;

  _MediaPacketProducerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketProducer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketProducerStubControl.fromHandle(
      core.MojoHandle handle, [MediaPacketProducer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketProducerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaPacketProducer.serviceName;


  Function _mediaPacketProducerConnectResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaPacketProducerConnectResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketProducerMethodConnectName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaPacketProducerMethodConnectName:
        var params = _MediaPacketProducerConnectParams.deserialize(
            message.payload);
        _impl.connect(params.consumer, _mediaPacketProducerConnectResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPacketProducerMethodDisconnectName:
        _impl.disconnect();
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaPacketProducer get impl => _impl;
  set impl(MediaPacketProducer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketProducerStubControl($superString)";
  }

  int get version => 0;
}

class MediaPacketProducerStub
    extends bindings.Stub<MediaPacketProducer>
    implements MediaPacketProducer,
               MediaPacketProducerInterface,
               MediaPacketProducerInterfaceRequest {
  MediaPacketProducerStub.unbound([MediaPacketProducer impl])
      : super(new _MediaPacketProducerStubControl.unbound(impl));

  MediaPacketProducerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketProducer impl])
      : super(new _MediaPacketProducerStubControl.fromEndpoint(endpoint, impl));

  MediaPacketProducerStub.fromHandle(
      core.MojoHandle handle, [MediaPacketProducer impl])
      : super(new _MediaPacketProducerStubControl.fromHandle(handle, impl));

  static MediaPacketProducerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketProducerStub"));
    return new MediaPacketProducerStub.fromEndpoint(endpoint);
  }


  void connect(MediaPacketConsumerInterface consumer,void callback()) {
    return impl.connect(consumer,callback);
  }
  void disconnect() {
    return impl.disconnect();
  }
}

const int _mediaPacketConsumerMethodPullDemandUpdateName = 0;
const int _mediaPacketConsumerMethodAddPayloadBufferName = 1;
const int _mediaPacketConsumerMethodRemovePayloadBufferName = 2;
const int _mediaPacketConsumerMethodSupplyPacketName = 3;
const int _mediaPacketConsumerMethodPrimeName = 4;
const int _mediaPacketConsumerMethodFlushName = 5;

class _MediaPacketConsumerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaPacketConsumer {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaPacketConsumerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaPacketConsumerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaPacketConsumerProxy p = new MediaPacketConsumerProxy.unbound();
    String name = serviceName ?? MediaPacketConsumer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void pullDemandUpdate(void callback(MediaPacketDemand demand));
  void addPayloadBuffer(int payloadBufferId, core.MojoSharedBuffer payloadBuffer);
  void removePayloadBuffer(int payloadBufferId);
  void supplyPacket(MediaPacket packet,void callback(MediaPacketDemand demand));
  void prime(void callback());
  void flush(void callback());
  static const int kMaxBufferLen = 4611686018427387903;
}

abstract class MediaPacketConsumerInterface
    implements bindings.MojoInterface<MediaPacketConsumer>,
               MediaPacketConsumer {
  factory MediaPacketConsumerInterface([MediaPacketConsumer impl]) =>
      new MediaPacketConsumerStub.unbound(impl);

  factory MediaPacketConsumerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaPacketConsumer impl]) =>
      new MediaPacketConsumerStub.fromEndpoint(endpoint, impl);

  factory MediaPacketConsumerInterface.fromMock(
      MediaPacketConsumer mock) =>
      new MediaPacketConsumerProxy.fromMock(mock);
}

abstract class MediaPacketConsumerInterfaceRequest
    implements bindings.MojoInterface<MediaPacketConsumer>,
               MediaPacketConsumer {
  factory MediaPacketConsumerInterfaceRequest() =>
      new MediaPacketConsumerProxy.unbound();
}

class _MediaPacketConsumerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaPacketConsumer> {
  MediaPacketConsumer impl;

  _MediaPacketConsumerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaPacketConsumerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaPacketConsumerProxyControl.unbound() : super.unbound();

  String get serviceName => MediaPacketConsumer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaPacketConsumerMethodPullDemandUpdateName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketConsumerPullDemandUpdateResponseParams.deserialize(
              message.payload);
          callback(r.demand );
        }
        break;
      case _mediaPacketConsumerMethodSupplyPacketName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketConsumerSupplyPacketResponseParams.deserialize(
              message.payload);
          callback(r.demand );
        }
        break;
      case _mediaPacketConsumerMethodPrimeName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketConsumerPrimeResponseParams.deserialize(
              message.payload);
          callback();
        }
        break;
      case _mediaPacketConsumerMethodFlushName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketConsumerFlushResponseParams.deserialize(
              message.payload);
          callback();
        }
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketConsumerProxyControl($superString)";
  }
}

class MediaPacketConsumerProxy
    extends bindings.Proxy<MediaPacketConsumer>
    implements MediaPacketConsumer,
               MediaPacketConsumerInterface,
               MediaPacketConsumerInterfaceRequest {
  MediaPacketConsumerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaPacketConsumerProxyControl.fromEndpoint(endpoint));

  MediaPacketConsumerProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaPacketConsumerProxyControl.fromHandle(handle));

  MediaPacketConsumerProxy.unbound()
      : super(new _MediaPacketConsumerProxyControl.unbound());

  factory MediaPacketConsumerProxy.fromMock(MediaPacketConsumer mock) {
    MediaPacketConsumerProxy newMockedProxy =
        new MediaPacketConsumerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaPacketConsumerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketConsumerProxy"));
    return new MediaPacketConsumerProxy.fromEndpoint(endpoint);
  }


  void pullDemandUpdate(void callback(MediaPacketDemand demand)) {
    if (impl != null) {
      impl.pullDemandUpdate(callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketConsumerPullDemandUpdateParams();
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((MediaPacketDemand demand) {
        z.bindCallback(() {
          callback(demand);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketConsumerMethodPullDemandUpdateName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void addPayloadBuffer(int payloadBufferId, core.MojoSharedBuffer payloadBuffer) {
    if (impl != null) {
      impl.addPayloadBuffer(payloadBufferId, payloadBuffer);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerAddPayloadBufferParams();
    params.payloadBufferId = payloadBufferId;
    params.payloadBuffer = payloadBuffer;
    ctrl.sendMessage(params,
        _mediaPacketConsumerMethodAddPayloadBufferName);
  }
  void removePayloadBuffer(int payloadBufferId) {
    if (impl != null) {
      impl.removePayloadBuffer(payloadBufferId);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerRemovePayloadBufferParams();
    params.payloadBufferId = payloadBufferId;
    ctrl.sendMessage(params,
        _mediaPacketConsumerMethodRemovePayloadBufferName);
  }
  void supplyPacket(MediaPacket packet,void callback(MediaPacketDemand demand)) {
    if (impl != null) {
      impl.supplyPacket(packet,callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketConsumerSupplyPacketParams();
    params.packet = packet;
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((MediaPacketDemand demand) {
        z.bindCallback(() {
          callback(demand);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketConsumerMethodSupplyPacketName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void prime(void callback()) {
    if (impl != null) {
      impl.prime(callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketConsumerPrimeParams();
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketConsumerMethodPrimeName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void flush(void callback()) {
    if (impl != null) {
      impl.flush(callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketConsumerFlushParams();
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketConsumerMethodFlushName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _MediaPacketConsumerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaPacketConsumer> {
  MediaPacketConsumer _impl;

  _MediaPacketConsumerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketConsumer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketConsumerStubControl.fromHandle(
      core.MojoHandle handle, [MediaPacketConsumer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketConsumerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaPacketConsumer.serviceName;


  Function _mediaPacketConsumerPullDemandUpdateResponseParamsResponder(
      int requestId) {
  return (MediaPacketDemand demand) {
      var result = new MediaPacketConsumerPullDemandUpdateResponseParams();
      result.demand = demand;
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketConsumerMethodPullDemandUpdateName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaPacketConsumerSupplyPacketResponseParamsResponder(
      int requestId) {
  return (MediaPacketDemand demand) {
      var result = new MediaPacketConsumerSupplyPacketResponseParams();
      result.demand = demand;
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketConsumerMethodSupplyPacketName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaPacketConsumerPrimeResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaPacketConsumerPrimeResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketConsumerMethodPrimeName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaPacketConsumerFlushResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaPacketConsumerFlushResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketConsumerMethodFlushName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaPacketConsumerMethodPullDemandUpdateName:
        _impl.pullDemandUpdate(_mediaPacketConsumerPullDemandUpdateResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPacketConsumerMethodAddPayloadBufferName:
        var params = _MediaPacketConsumerAddPayloadBufferParams.deserialize(
            message.payload);
        _impl.addPayloadBuffer(params.payloadBufferId, params.payloadBuffer);
        break;
      case _mediaPacketConsumerMethodRemovePayloadBufferName:
        var params = _MediaPacketConsumerRemovePayloadBufferParams.deserialize(
            message.payload);
        _impl.removePayloadBuffer(params.payloadBufferId);
        break;
      case _mediaPacketConsumerMethodSupplyPacketName:
        var params = _MediaPacketConsumerSupplyPacketParams.deserialize(
            message.payload);
        _impl.supplyPacket(params.packet, _mediaPacketConsumerSupplyPacketResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPacketConsumerMethodPrimeName:
        _impl.prime(_mediaPacketConsumerPrimeResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPacketConsumerMethodFlushName:
        _impl.flush(_mediaPacketConsumerFlushResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaPacketConsumer get impl => _impl;
  set impl(MediaPacketConsumer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketConsumerStubControl($superString)";
  }

  int get version => 0;
}

class MediaPacketConsumerStub
    extends bindings.Stub<MediaPacketConsumer>
    implements MediaPacketConsumer,
               MediaPacketConsumerInterface,
               MediaPacketConsumerInterfaceRequest {
  MediaPacketConsumerStub.unbound([MediaPacketConsumer impl])
      : super(new _MediaPacketConsumerStubControl.unbound(impl));

  MediaPacketConsumerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketConsumer impl])
      : super(new _MediaPacketConsumerStubControl.fromEndpoint(endpoint, impl));

  MediaPacketConsumerStub.fromHandle(
      core.MojoHandle handle, [MediaPacketConsumer impl])
      : super(new _MediaPacketConsumerStubControl.fromHandle(handle, impl));

  static MediaPacketConsumerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketConsumerStub"));
    return new MediaPacketConsumerStub.fromEndpoint(endpoint);
  }


  void pullDemandUpdate(void callback(MediaPacketDemand demand)) {
    return impl.pullDemandUpdate(callback);
  }
  void addPayloadBuffer(int payloadBufferId, core.MojoSharedBuffer payloadBuffer) {
    return impl.addPayloadBuffer(payloadBufferId, payloadBuffer);
  }
  void removePayloadBuffer(int payloadBufferId) {
    return impl.removePayloadBuffer(payloadBufferId);
  }
  void supplyPacket(MediaPacket packet,void callback(MediaPacketDemand demand)) {
    return impl.supplyPacket(packet,callback);
  }
  void prime(void callback()) {
    return impl.prime(callback);
  }
  void flush(void callback()) {
    return impl.flush(callback);
  }
}



