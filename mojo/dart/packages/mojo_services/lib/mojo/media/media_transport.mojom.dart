// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_transport_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class MediaPacketRegion extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int offset = 0;
  int length = 0;

  MediaPacketRegion() : super(kVersions.last.size);

  MediaPacketRegion.init(
    int this.offset, 
    int this.length
  ) : super(kVersions.last.size);

  static MediaPacketRegion deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketRegion decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketRegion result = new MediaPacketRegion();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.offset = decoder0.decodeUint64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.length = decoder0.decodeUint64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketRegion";
    String fieldName;
    try {
      fieldName = "offset";
      encoder0.encodeUint64(offset, 8);
      fieldName = "length";
      encoder0.encodeUint64(length, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketRegion("
           "offset: $offset" ", "
           "length: $length" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["offset"] = offset;
    map["length"] = length;
    return map;
  }
}


class MediaPacket extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  static const int kNoTimestamp = 9223372036854775807;
  int pts = 9223372036854775807;
  bool endOfStream = false;
  MediaPacketRegion payload = null;
  List<MediaPacketRegion> extraPayload = null;

  MediaPacket() : super(kVersions.last.size);

  MediaPacket.init(
    int this.pts, 
    bool this.endOfStream, 
    MediaPacketRegion this.payload, 
    List<MediaPacketRegion> this.extraPayload
  ) : super(kVersions.last.size);

  static MediaPacket deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacket decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacket result = new MediaPacket();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.pts = decoder0.decodeInt64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.endOfStream = decoder0.decodeBool(16, 0);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(24, false);
      result.payload = MediaPacketRegion.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(32, true);
      if (decoder1 == null) {
        result.extraPayload = null;
      } else {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.extraPayload = new List<MediaPacketRegion>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.extraPayload[i1] = MediaPacketRegion.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacket";
    String fieldName;
    try {
      fieldName = "pts";
      encoder0.encodeInt64(pts, 8);
      fieldName = "endOfStream";
      encoder0.encodeBool(endOfStream, 16, 0);
      fieldName = "payload";
      encoder0.encodeStruct(payload, 24, false);
      fieldName = "extraPayload";
      if (extraPayload == null) {
        encoder0.encodeNullPointer(32, true);
      } else {
        var encoder1 = encoder0.encodePointerArray(extraPayload.length, 32, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < extraPayload.length; ++i0) {
          encoder1.encodeStruct(extraPayload[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacket("
           "pts: $pts" ", "
           "endOfStream: $endOfStream" ", "
           "payload: $payload" ", "
           "extraPayload: $extraPayload" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["pts"] = pts;
    map["endOfStream"] = endOfStream;
    map["payload"] = payload;
    map["extraPayload"] = extraPayload;
    return map;
  }
}


class _MediaPacketProducerConnectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacketConsumerInterface consumer = null;

  _MediaPacketProducerConnectParams() : super(kVersions.last.size);

  _MediaPacketProducerConnectParams.init(
    MediaPacketConsumerInterface this.consumer
  ) : super(kVersions.last.size);

  static _MediaPacketProducerConnectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerConnectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerConnectParams result = new _MediaPacketProducerConnectParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.consumer = decoder0.decodeServiceInterface(8, false, MediaPacketConsumerProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerConnectParams";
    String fieldName;
    try {
      fieldName = "consumer";
      encoder0.encodeInterface(consumer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerConnectParams("
           "consumer: $consumer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class MediaPacketProducerConnectResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaPacketProducerConnectResponseParams() : super(kVersions.last.size);

  MediaPacketProducerConnectResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaPacketProducerConnectResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketProducerConnectResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketProducerConnectResponseParams result = new MediaPacketProducerConnectResponseParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketProducerConnectResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketProducerConnectResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketProducerDisconnectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketProducerDisconnectParams() : super(kVersions.last.size);

  _MediaPacketProducerDisconnectParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketProducerDisconnectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerDisconnectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerDisconnectParams result = new _MediaPacketProducerDisconnectParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerDisconnectParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerDisconnectParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerSetBufferParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  core.MojoSharedBuffer buffer = null;

  _MediaPacketConsumerSetBufferParams() : super(kVersions.last.size);

  _MediaPacketConsumerSetBufferParams.init(
    core.MojoSharedBuffer this.buffer
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerSetBufferParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerSetBufferParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerSetBufferParams result = new _MediaPacketConsumerSetBufferParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.buffer = decoder0.decodeSharedBufferHandle(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerSetBufferParams";
    String fieldName;
    try {
      fieldName = "buffer";
      encoder0.encodeSharedBufferHandle(buffer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerSetBufferParams("
           "buffer: $buffer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class MediaPacketConsumerSetBufferResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaPacketConsumerSetBufferResponseParams() : super(kVersions.last.size);

  MediaPacketConsumerSetBufferResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaPacketConsumerSetBufferResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketConsumerSetBufferResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketConsumerSetBufferResponseParams result = new MediaPacketConsumerSetBufferResponseParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketConsumerSetBufferResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketConsumerSetBufferResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerSendPacketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacket packet = null;

  _MediaPacketConsumerSendPacketParams() : super(kVersions.last.size);

  _MediaPacketConsumerSendPacketParams.init(
    MediaPacket this.packet
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerSendPacketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerSendPacketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerSendPacketParams result = new _MediaPacketConsumerSendPacketParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.packet = MediaPacket.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerSendPacketParams";
    String fieldName;
    try {
      fieldName = "packet";
      encoder0.encodeStruct(packet, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerSendPacketParams("
           "packet: $packet" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["packet"] = packet;
    return map;
  }
}


class MediaPacketConsumerSendPacketResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacketConsumerSendResult result = null;

  MediaPacketConsumerSendPacketResponseParams() : super(kVersions.last.size);

  MediaPacketConsumerSendPacketResponseParams.init(
    MediaPacketConsumerSendResult this.result
  ) : super(kVersions.last.size);

  static MediaPacketConsumerSendPacketResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketConsumerSendPacketResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketConsumerSendPacketResponseParams result = new MediaPacketConsumerSendPacketResponseParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.result = MediaPacketConsumerSendResult.decode(decoder0, 8);
        if (result.result == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable MediaPacketConsumerSendResult.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketConsumerSendPacketResponseParams";
    String fieldName;
    try {
      fieldName = "result";
      encoder0.encodeEnum(result, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketConsumerSendPacketResponseParams("
           "result: $result" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    return map;
  }
}


class _MediaPacketConsumerPrimeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerPrimeParams() : super(kVersions.last.size);

  _MediaPacketConsumerPrimeParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerPrimeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerPrimeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerPrimeParams result = new _MediaPacketConsumerPrimeParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerPrimeParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerPrimeParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaPacketConsumerPrimeResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaPacketConsumerPrimeResponseParams() : super(kVersions.last.size);

  MediaPacketConsumerPrimeResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaPacketConsumerPrimeResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketConsumerPrimeResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketConsumerPrimeResponseParams result = new MediaPacketConsumerPrimeResponseParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketConsumerPrimeResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketConsumerPrimeResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerFlushParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerFlushParams() : super(kVersions.last.size);

  _MediaPacketConsumerFlushParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerFlushParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerFlushParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerFlushParams result = new _MediaPacketConsumerFlushParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerFlushParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerFlushParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaPacketConsumerFlushResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaPacketConsumerFlushResponseParams() : super(kVersions.last.size);

  MediaPacketConsumerFlushResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaPacketConsumerFlushResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketConsumerFlushResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketConsumerFlushResponseParams result = new MediaPacketConsumerFlushResponseParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketConsumerFlushResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketConsumerFlushResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _mediaPacketProducerMethodConnectName = 0;
const int _mediaPacketProducerMethodDisconnectName = 1;

class _MediaPacketProducerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaPacketProducer {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaPacketProducerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaPacketProducerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaPacketProducerProxy p = new MediaPacketProducerProxy.unbound();
    String name = serviceName ?? MediaPacketProducer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void connect(MediaPacketConsumerInterface consumer,void callback());
  void disconnect();
}

abstract class MediaPacketProducerInterface
    implements bindings.MojoInterface<MediaPacketProducer>,
               MediaPacketProducer {
  factory MediaPacketProducerInterface([MediaPacketProducer impl]) =>
      new MediaPacketProducerStub.unbound(impl);

  factory MediaPacketProducerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaPacketProducer impl]) =>
      new MediaPacketProducerStub.fromEndpoint(endpoint, impl);

  factory MediaPacketProducerInterface.fromMock(
      MediaPacketProducer mock) =>
      new MediaPacketProducerProxy.fromMock(mock);
}

abstract class MediaPacketProducerInterfaceRequest
    implements bindings.MojoInterface<MediaPacketProducer>,
               MediaPacketProducer {
  factory MediaPacketProducerInterfaceRequest() =>
      new MediaPacketProducerProxy.unbound();
}

class _MediaPacketProducerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaPacketProducer> {
  MediaPacketProducer impl;

  _MediaPacketProducerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaPacketProducerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaPacketProducerProxyControl.unbound() : super.unbound();

  String get serviceName => MediaPacketProducer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaPacketProducerMethodConnectName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketProducerConnectResponseParams.deserialize(
              message.payload);
          callback();
        }
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketProducerProxyControl($superString)";
  }
}

class MediaPacketProducerProxy
    extends bindings.Proxy<MediaPacketProducer>
    implements MediaPacketProducer,
               MediaPacketProducerInterface,
               MediaPacketProducerInterfaceRequest {
  MediaPacketProducerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaPacketProducerProxyControl.fromEndpoint(endpoint));

  MediaPacketProducerProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaPacketProducerProxyControl.fromHandle(handle));

  MediaPacketProducerProxy.unbound()
      : super(new _MediaPacketProducerProxyControl.unbound());

  factory MediaPacketProducerProxy.fromMock(MediaPacketProducer mock) {
    MediaPacketProducerProxy newMockedProxy =
        new MediaPacketProducerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaPacketProducerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketProducerProxy"));
    return new MediaPacketProducerProxy.fromEndpoint(endpoint);
  }


  void connect(MediaPacketConsumerInterface consumer,void callback()) {
    if (impl != null) {
      impl.connect(consumer,callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketProducerConnectParams();
    params.consumer = consumer;
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketProducerMethodConnectName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void disconnect() {
    if (impl != null) {
      impl.disconnect();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerDisconnectParams();
    ctrl.sendMessage(params,
        _mediaPacketProducerMethodDisconnectName);
  }
}

class _MediaPacketProducerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaPacketProducer> {
  MediaPacketProducer _impl;

  _MediaPacketProducerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketProducer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketProducerStubControl.fromHandle(
      core.MojoHandle handle, [MediaPacketProducer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketProducerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaPacketProducer.serviceName;


  Function _mediaPacketProducerConnectResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaPacketProducerConnectResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketProducerMethodConnectName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaPacketProducerMethodConnectName:
        var params = _MediaPacketProducerConnectParams.deserialize(
            message.payload);
        _impl.connect(params.consumer, _mediaPacketProducerConnectResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPacketProducerMethodDisconnectName:
        _impl.disconnect();
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaPacketProducer get impl => _impl;
  set impl(MediaPacketProducer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketProducerStubControl($superString)";
  }

  int get version => 0;
}

class MediaPacketProducerStub
    extends bindings.Stub<MediaPacketProducer>
    implements MediaPacketProducer,
               MediaPacketProducerInterface,
               MediaPacketProducerInterfaceRequest {
  MediaPacketProducerStub.unbound([MediaPacketProducer impl])
      : super(new _MediaPacketProducerStubControl.unbound(impl));

  MediaPacketProducerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketProducer impl])
      : super(new _MediaPacketProducerStubControl.fromEndpoint(endpoint, impl));

  MediaPacketProducerStub.fromHandle(
      core.MojoHandle handle, [MediaPacketProducer impl])
      : super(new _MediaPacketProducerStubControl.fromHandle(handle, impl));

  static MediaPacketProducerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketProducerStub"));
    return new MediaPacketProducerStub.fromEndpoint(endpoint);
  }


  void connect(MediaPacketConsumerInterface consumer,void callback()) {
    return impl.connect(consumer,callback);
  }
  void disconnect() {
    return impl.disconnect();
  }
}

const int _mediaPacketConsumerMethodSetBufferName = 0;
const int _mediaPacketConsumerMethodSendPacketName = 1;
const int _mediaPacketConsumerMethodPrimeName = 2;
const int _mediaPacketConsumerMethodFlushName = 3;
  
class MediaPacketConsumerSendResult extends bindings.MojoEnum {
  static const MediaPacketConsumerSendResult consumed = const MediaPacketConsumerSendResult._(0);
  static const MediaPacketConsumerSendResult flushed = const MediaPacketConsumerSendResult._(1);

  const MediaPacketConsumerSendResult._(int v) : super(v);

  static const Map<String, MediaPacketConsumerSendResult> valuesMap = const {
    "consumed": consumed,
    "flushed": flushed,
  };
  static const List<MediaPacketConsumerSendResult> values = const [
    consumed,
    flushed,
  ];

  static MediaPacketConsumerSendResult valueOf(String name) => valuesMap[name];

  factory MediaPacketConsumerSendResult(int v) {
    switch (v) {
      case 0:
        return MediaPacketConsumerSendResult.consumed;
      case 1:
        return MediaPacketConsumerSendResult.flushed;
      default:
        return null;
    }
  }

  static MediaPacketConsumerSendResult decode(bindings.Decoder decoder0, int offset) {
    int v = decoder0.decodeUint32(offset);
    MediaPacketConsumerSendResult result = new MediaPacketConsumerSendResult(v);
    if (result == null) {
      throw new bindings.MojoCodecError(
          'Bad value $v for enum MediaPacketConsumerSendResult.');
    }
    return result;
  }

  String toString() {
    switch(this) {
      case consumed:
        return 'MediaPacketConsumerSendResult.consumed';
      case flushed:
        return 'MediaPacketConsumerSendResult.flushed';
      default:
        return null;
    }
  }

  int toJson() => mojoEnumValue;
}

class _MediaPacketConsumerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaPacketConsumer {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaPacketConsumerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaPacketConsumerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaPacketConsumerProxy p = new MediaPacketConsumerProxy.unbound();
    String name = serviceName ?? MediaPacketConsumer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void setBuffer(core.MojoSharedBuffer buffer,void callback());
  void sendPacket(MediaPacket packet,void callback(MediaPacketConsumerSendResult result));
  void prime(void callback());
  void flush(void callback());
  static const int kMaxBufferLen = 4611686018427387903;
}

abstract class MediaPacketConsumerInterface
    implements bindings.MojoInterface<MediaPacketConsumer>,
               MediaPacketConsumer {
  factory MediaPacketConsumerInterface([MediaPacketConsumer impl]) =>
      new MediaPacketConsumerStub.unbound(impl);

  factory MediaPacketConsumerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaPacketConsumer impl]) =>
      new MediaPacketConsumerStub.fromEndpoint(endpoint, impl);

  factory MediaPacketConsumerInterface.fromMock(
      MediaPacketConsumer mock) =>
      new MediaPacketConsumerProxy.fromMock(mock);
}

abstract class MediaPacketConsumerInterfaceRequest
    implements bindings.MojoInterface<MediaPacketConsumer>,
               MediaPacketConsumer {
  factory MediaPacketConsumerInterfaceRequest() =>
      new MediaPacketConsumerProxy.unbound();
}

class _MediaPacketConsumerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaPacketConsumer> {
  MediaPacketConsumer impl;

  _MediaPacketConsumerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaPacketConsumerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaPacketConsumerProxyControl.unbound() : super.unbound();

  String get serviceName => MediaPacketConsumer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaPacketConsumerMethodSetBufferName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketConsumerSetBufferResponseParams.deserialize(
              message.payload);
          callback();
        }
        break;
      case _mediaPacketConsumerMethodSendPacketName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketConsumerSendPacketResponseParams.deserialize(
              message.payload);
          callback(r.result );
        }
        break;
      case _mediaPacketConsumerMethodPrimeName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketConsumerPrimeResponseParams.deserialize(
              message.payload);
          callback();
        }
        break;
      case _mediaPacketConsumerMethodFlushName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = MediaPacketConsumerFlushResponseParams.deserialize(
              message.payload);
          callback();
        }
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketConsumerProxyControl($superString)";
  }
}

class MediaPacketConsumerProxy
    extends bindings.Proxy<MediaPacketConsumer>
    implements MediaPacketConsumer,
               MediaPacketConsumerInterface,
               MediaPacketConsumerInterfaceRequest {
  MediaPacketConsumerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaPacketConsumerProxyControl.fromEndpoint(endpoint));

  MediaPacketConsumerProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaPacketConsumerProxyControl.fromHandle(handle));

  MediaPacketConsumerProxy.unbound()
      : super(new _MediaPacketConsumerProxyControl.unbound());

  factory MediaPacketConsumerProxy.fromMock(MediaPacketConsumer mock) {
    MediaPacketConsumerProxy newMockedProxy =
        new MediaPacketConsumerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaPacketConsumerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketConsumerProxy"));
    return new MediaPacketConsumerProxy.fromEndpoint(endpoint);
  }


  void setBuffer(core.MojoSharedBuffer buffer,void callback()) {
    if (impl != null) {
      impl.setBuffer(buffer,callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketConsumerSetBufferParams();
    params.buffer = buffer;
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketConsumerMethodSetBufferName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void sendPacket(MediaPacket packet,void callback(MediaPacketConsumerSendResult result)) {
    if (impl != null) {
      impl.sendPacket(packet,callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketConsumerSendPacketParams();
    params.packet = packet;
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((MediaPacketConsumerSendResult result) {
        z.bindCallback(() {
          callback(result);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketConsumerMethodSendPacketName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void prime(void callback()) {
    if (impl != null) {
      impl.prime(callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketConsumerPrimeParams();
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketConsumerMethodPrimeName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void flush(void callback()) {
    if (impl != null) {
      impl.flush(callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _MediaPacketConsumerFlushParams();
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPacketConsumerMethodFlushName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _MediaPacketConsumerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaPacketConsumer> {
  MediaPacketConsumer _impl;

  _MediaPacketConsumerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketConsumer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketConsumerStubControl.fromHandle(
      core.MojoHandle handle, [MediaPacketConsumer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketConsumerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaPacketConsumer.serviceName;


  Function _mediaPacketConsumerSetBufferResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaPacketConsumerSetBufferResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketConsumerMethodSetBufferName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaPacketConsumerSendPacketResponseParamsResponder(
      int requestId) {
  return (MediaPacketConsumerSendResult result) {
      var result = new MediaPacketConsumerSendPacketResponseParams();
      result.result = result;
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketConsumerMethodSendPacketName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaPacketConsumerPrimeResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaPacketConsumerPrimeResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketConsumerMethodPrimeName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaPacketConsumerFlushResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaPacketConsumerFlushResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaPacketConsumerMethodFlushName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaPacketConsumerMethodSetBufferName:
        var params = _MediaPacketConsumerSetBufferParams.deserialize(
            message.payload);
        _impl.setBuffer(params.buffer, _mediaPacketConsumerSetBufferResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPacketConsumerMethodSendPacketName:
        var params = _MediaPacketConsumerSendPacketParams.deserialize(
            message.payload);
        _impl.sendPacket(params.packet, _mediaPacketConsumerSendPacketResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPacketConsumerMethodPrimeName:
        _impl.prime(_mediaPacketConsumerPrimeResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPacketConsumerMethodFlushName:
        _impl.flush(_mediaPacketConsumerFlushResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaPacketConsumer get impl => _impl;
  set impl(MediaPacketConsumer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketConsumerStubControl($superString)";
  }

  int get version => 0;
}

class MediaPacketConsumerStub
    extends bindings.Stub<MediaPacketConsumer>
    implements MediaPacketConsumer,
               MediaPacketConsumerInterface,
               MediaPacketConsumerInterfaceRequest {
  MediaPacketConsumerStub.unbound([MediaPacketConsumer impl])
      : super(new _MediaPacketConsumerStubControl.unbound(impl));

  MediaPacketConsumerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketConsumer impl])
      : super(new _MediaPacketConsumerStubControl.fromEndpoint(endpoint, impl));

  MediaPacketConsumerStub.fromHandle(
      core.MojoHandle handle, [MediaPacketConsumer impl])
      : super(new _MediaPacketConsumerStubControl.fromHandle(handle, impl));

  static MediaPacketConsumerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketConsumerStub"));
    return new MediaPacketConsumerStub.fromEndpoint(endpoint);
  }


  void setBuffer(core.MojoSharedBuffer buffer,void callback()) {
    return impl.setBuffer(buffer,callback);
  }
  void sendPacket(MediaPacket packet,void callback(MediaPacketConsumerSendResult result)) {
    return impl.sendPacket(packet,callback);
  }
  void prime(void callback()) {
    return impl.prime(callback);
  }
  void flush(void callback()) {
    return impl.flush(callback);
  }
}



