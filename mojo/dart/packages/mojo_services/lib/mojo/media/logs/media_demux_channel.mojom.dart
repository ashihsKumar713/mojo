// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_demux_channel_mojom;
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/media/media_types.mojom.dart' as media_types_mojom;



class _MediaDemuxChannelNewStreamParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  int index = 0;
  media_types_mojom.MediaType type = null;
  int producerAddress = 0;

  _MediaDemuxChannelNewStreamParams() : super(kVersions.last.size);

  _MediaDemuxChannelNewStreamParams.init(
    int this.index, 
    media_types_mojom.MediaType this.type, 
    int this.producerAddress
  ) : super(kVersions.last.size);

  static _MediaDemuxChannelNewStreamParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaDemuxChannelNewStreamParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaDemuxChannelNewStreamParams result = new _MediaDemuxChannelNewStreamParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.index = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.type = media_types_mojom.MediaType.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.producerAddress = decoder0.decodeUint64(24);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaDemuxChannelNewStreamParams";
    String fieldName;
    try {
      fieldName = "index";
      encoder0.encodeUint32(index, 8);
      fieldName = "type";
      encoder0.encodeStruct(type, 16, false);
      fieldName = "producerAddress";
      encoder0.encodeUint64(producerAddress, 24);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaDemuxChannelNewStreamParams("
           "index: $index" ", "
           "type: $type" ", "
           "producerAddress: $producerAddress" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["index"] = index;
    map["type"] = type;
    map["producerAddress"] = producerAddress;
    return map;
  }
}

const int _mediaDemuxChannelMethodNewStreamName = 0;

class _MediaDemuxChannelServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaDemuxChannel {
  static const String serviceName = "mojo::media::logs::MediaDemuxChannel";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaDemuxChannelServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaDemuxChannelProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaDemuxChannelProxy p = new MediaDemuxChannelProxy.unbound();
    String name = serviceName ?? MediaDemuxChannel.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void newStream(int index, media_types_mojom.MediaType type, int producerAddress);
}

abstract class MediaDemuxChannelInterface
    implements bindings.MojoInterface<MediaDemuxChannel>,
               MediaDemuxChannel {
  factory MediaDemuxChannelInterface([MediaDemuxChannel impl]) =>
      new MediaDemuxChannelStub.unbound(impl);

  factory MediaDemuxChannelInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaDemuxChannel impl]) =>
      new MediaDemuxChannelStub.fromEndpoint(endpoint, impl);

  factory MediaDemuxChannelInterface.fromMock(
      MediaDemuxChannel mock) =>
      new MediaDemuxChannelProxy.fromMock(mock);
}

abstract class MediaDemuxChannelInterfaceRequest
    implements bindings.MojoInterface<MediaDemuxChannel>,
               MediaDemuxChannel {
  factory MediaDemuxChannelInterfaceRequest() =>
      new MediaDemuxChannelProxy.unbound();
}

class _MediaDemuxChannelProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaDemuxChannel> {
  MediaDemuxChannel impl;

  _MediaDemuxChannelProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaDemuxChannelProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaDemuxChannelProxyControl.unbound() : super.unbound();

  String get serviceName => MediaDemuxChannel.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaDemuxChannelProxyControl($superString)";
  }
}

class MediaDemuxChannelProxy
    extends bindings.Proxy<MediaDemuxChannel>
    implements MediaDemuxChannel,
               MediaDemuxChannelInterface,
               MediaDemuxChannelInterfaceRequest {
  MediaDemuxChannelProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaDemuxChannelProxyControl.fromEndpoint(endpoint));

  MediaDemuxChannelProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaDemuxChannelProxyControl.fromHandle(handle));

  MediaDemuxChannelProxy.unbound()
      : super(new _MediaDemuxChannelProxyControl.unbound());

  factory MediaDemuxChannelProxy.fromMock(MediaDemuxChannel mock) {
    MediaDemuxChannelProxy newMockedProxy =
        new MediaDemuxChannelProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaDemuxChannelProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaDemuxChannelProxy"));
    return new MediaDemuxChannelProxy.fromEndpoint(endpoint);
  }


  void newStream(int index, media_types_mojom.MediaType type, int producerAddress) {
    if (impl != null) {
      impl.newStream(index, type, producerAddress);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaDemuxChannelNewStreamParams();
    params.index = index;
    params.type = type;
    params.producerAddress = producerAddress;
    ctrl.sendMessage(params,
        _mediaDemuxChannelMethodNewStreamName);
  }
}

class _MediaDemuxChannelStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaDemuxChannel> {
  MediaDemuxChannel _impl;

  _MediaDemuxChannelStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaDemuxChannel impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaDemuxChannelStubControl.fromHandle(
      core.MojoHandle handle, [MediaDemuxChannel impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaDemuxChannelStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaDemuxChannel.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaDemuxChannelMethodNewStreamName:
        var params = _MediaDemuxChannelNewStreamParams.deserialize(
            message.payload);
        _impl.newStream(params.index, params.type, params.producerAddress);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaDemuxChannel get impl => _impl;
  set impl(MediaDemuxChannel d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaDemuxChannelStubControl($superString)";
  }

  int get version => 0;
}

class MediaDemuxChannelStub
    extends bindings.Stub<MediaDemuxChannel>
    implements MediaDemuxChannel,
               MediaDemuxChannelInterface,
               MediaDemuxChannelInterfaceRequest {
  MediaDemuxChannelStub.unbound([MediaDemuxChannel impl])
      : super(new _MediaDemuxChannelStubControl.unbound(impl));

  MediaDemuxChannelStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaDemuxChannel impl])
      : super(new _MediaDemuxChannelStubControl.fromEndpoint(endpoint, impl));

  MediaDemuxChannelStub.fromHandle(
      core.MojoHandle handle, [MediaDemuxChannel impl])
      : super(new _MediaDemuxChannelStubControl.fromHandle(handle, impl));

  static MediaDemuxChannelStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaDemuxChannelStub"));
    return new MediaDemuxChannelStub.fromEndpoint(endpoint);
  }


  void newStream(int index, media_types_mojom.MediaType type, int producerAddress) {
    return impl.newStream(index, type, producerAddress);
  }
}



