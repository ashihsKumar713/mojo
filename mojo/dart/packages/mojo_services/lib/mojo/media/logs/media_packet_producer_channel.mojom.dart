// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_packet_producer_channel_mojom;
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/media/media_transport.mojom.dart' as media_transport_mojom;



class _MediaPacketProducerChannelConnectingParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketProducerChannelConnectingParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelConnectingParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelConnectingParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelConnectingParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelConnectingParams result = new _MediaPacketProducerChannelConnectingParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelConnectingParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelConnectingParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketProducerChannelResettingParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketProducerChannelResettingParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelResettingParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelResettingParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelResettingParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelResettingParams result = new _MediaPacketProducerChannelResettingParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelResettingParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelResettingParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketProducerChannelRequestingPrimeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketProducerChannelRequestingPrimeParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelRequestingPrimeParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelRequestingPrimeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelRequestingPrimeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelRequestingPrimeParams result = new _MediaPacketProducerChannelRequestingPrimeParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelRequestingPrimeParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelRequestingPrimeParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketProducerChannelPrimeCompletedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketProducerChannelPrimeCompletedParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelPrimeCompletedParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelPrimeCompletedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelPrimeCompletedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelPrimeCompletedParams result = new _MediaPacketProducerChannelPrimeCompletedParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelPrimeCompletedParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelPrimeCompletedParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketProducerChannelRequestingFlushParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketProducerChannelRequestingFlushParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelRequestingFlushParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelRequestingFlushParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelRequestingFlushParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelRequestingFlushParams result = new _MediaPacketProducerChannelRequestingFlushParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelRequestingFlushParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelRequestingFlushParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketProducerChannelFlushCompletedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketProducerChannelFlushCompletedParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelFlushCompletedParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelFlushCompletedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelFlushCompletedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelFlushCompletedParams result = new _MediaPacketProducerChannelFlushCompletedParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelFlushCompletedParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelFlushCompletedParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketProducerChannelAllocatingPayloadBufferParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  int index = 0;
  int size = 0;
  int bufferAddress = 0;

  _MediaPacketProducerChannelAllocatingPayloadBufferParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelAllocatingPayloadBufferParams.init(
    int this.index, 
    int this.size, 
    int this.bufferAddress
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelAllocatingPayloadBufferParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelAllocatingPayloadBufferParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelAllocatingPayloadBufferParams result = new _MediaPacketProducerChannelAllocatingPayloadBufferParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.index = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.size = decoder0.decodeUint64(16);
    }
    if (mainDataHeader.version >= 0) {
      
      result.bufferAddress = decoder0.decodeUint64(24);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelAllocatingPayloadBufferParams";
    String fieldName;
    try {
      fieldName = "index";
      encoder0.encodeUint32(index, 8);
      fieldName = "size";
      encoder0.encodeUint64(size, 16);
      fieldName = "bufferAddress";
      encoder0.encodeUint64(bufferAddress, 24);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelAllocatingPayloadBufferParams("
           "index: $index" ", "
           "size: $size" ", "
           "bufferAddress: $bufferAddress" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["index"] = index;
    map["size"] = size;
    map["bufferAddress"] = bufferAddress;
    return map;
  }
}


class _MediaPacketProducerChannelPayloadBufferAllocationFailureParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int index = 0;
  int size = 0;

  _MediaPacketProducerChannelPayloadBufferAllocationFailureParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelPayloadBufferAllocationFailureParams.init(
    int this.index, 
    int this.size
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelPayloadBufferAllocationFailureParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelPayloadBufferAllocationFailureParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelPayloadBufferAllocationFailureParams result = new _MediaPacketProducerChannelPayloadBufferAllocationFailureParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.index = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.size = decoder0.decodeUint64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelPayloadBufferAllocationFailureParams";
    String fieldName;
    try {
      fieldName = "index";
      encoder0.encodeUint32(index, 8);
      fieldName = "size";
      encoder0.encodeUint64(size, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelPayloadBufferAllocationFailureParams("
           "index: $index" ", "
           "size: $size" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["index"] = index;
    map["size"] = size;
    return map;
  }
}


class _MediaPacketProducerChannelReleasingPayloadBufferParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int index = 0;
  int bufferAddress = 0;

  _MediaPacketProducerChannelReleasingPayloadBufferParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelReleasingPayloadBufferParams.init(
    int this.index, 
    int this.bufferAddress
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelReleasingPayloadBufferParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelReleasingPayloadBufferParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelReleasingPayloadBufferParams result = new _MediaPacketProducerChannelReleasingPayloadBufferParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.index = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.bufferAddress = decoder0.decodeUint64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelReleasingPayloadBufferParams";
    String fieldName;
    try {
      fieldName = "index";
      encoder0.encodeUint32(index, 8);
      fieldName = "bufferAddress";
      encoder0.encodeUint64(bufferAddress, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelReleasingPayloadBufferParams("
           "index: $index" ", "
           "bufferAddress: $bufferAddress" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["index"] = index;
    map["bufferAddress"] = bufferAddress;
    return map;
  }
}


class _MediaPacketProducerChannelDemandUpdatedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  media_transport_mojom.MediaPacketDemand demand = null;

  _MediaPacketProducerChannelDemandUpdatedParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelDemandUpdatedParams.init(
    media_transport_mojom.MediaPacketDemand this.demand
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelDemandUpdatedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelDemandUpdatedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelDemandUpdatedParams result = new _MediaPacketProducerChannelDemandUpdatedParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.demand = media_transport_mojom.MediaPacketDemand.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelDemandUpdatedParams";
    String fieldName;
    try {
      fieldName = "demand";
      encoder0.encodeStruct(demand, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelDemandUpdatedParams("
           "demand: $demand" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["demand"] = demand;
    return map;
  }
}


class _MediaPacketProducerChannelProducingPacketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  int label = 0;
  media_transport_mojom.MediaPacket packet = null;
  int payloadAddress = 0;
  int packetsOutstanding = 0;

  _MediaPacketProducerChannelProducingPacketParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelProducingPacketParams.init(
    int this.label, 
    media_transport_mojom.MediaPacket this.packet, 
    int this.payloadAddress, 
    int this.packetsOutstanding
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelProducingPacketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelProducingPacketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelProducingPacketParams result = new _MediaPacketProducerChannelProducingPacketParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.label = decoder0.decodeUint64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.packet = media_transport_mojom.MediaPacket.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.payloadAddress = decoder0.decodeUint64(24);
    }
    if (mainDataHeader.version >= 0) {
      
      result.packetsOutstanding = decoder0.decodeUint32(32);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelProducingPacketParams";
    String fieldName;
    try {
      fieldName = "label";
      encoder0.encodeUint64(label, 8);
      fieldName = "packet";
      encoder0.encodeStruct(packet, 16, false);
      fieldName = "payloadAddress";
      encoder0.encodeUint64(payloadAddress, 24);
      fieldName = "packetsOutstanding";
      encoder0.encodeUint32(packetsOutstanding, 32);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelProducingPacketParams("
           "label: $label" ", "
           "packet: $packet" ", "
           "payloadAddress: $payloadAddress" ", "
           "packetsOutstanding: $packetsOutstanding" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["label"] = label;
    map["packet"] = packet;
    map["payloadAddress"] = payloadAddress;
    map["packetsOutstanding"] = packetsOutstanding;
    return map;
  }
}


class _MediaPacketProducerChannelRetiringPacketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int label = 0;
  int packetsOutstanding = 0;

  _MediaPacketProducerChannelRetiringPacketParams() : super(kVersions.last.size);

  _MediaPacketProducerChannelRetiringPacketParams.init(
    int this.label, 
    int this.packetsOutstanding
  ) : super(kVersions.last.size);

  static _MediaPacketProducerChannelRetiringPacketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketProducerChannelRetiringPacketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketProducerChannelRetiringPacketParams result = new _MediaPacketProducerChannelRetiringPacketParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.label = decoder0.decodeUint64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.packetsOutstanding = decoder0.decodeUint32(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketProducerChannelRetiringPacketParams";
    String fieldName;
    try {
      fieldName = "label";
      encoder0.encodeUint64(label, 8);
      fieldName = "packetsOutstanding";
      encoder0.encodeUint32(packetsOutstanding, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketProducerChannelRetiringPacketParams("
           "label: $label" ", "
           "packetsOutstanding: $packetsOutstanding" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["label"] = label;
    map["packetsOutstanding"] = packetsOutstanding;
    return map;
  }
}

const int _mediaPacketProducerChannelMethodConnectingName = 0;
const int _mediaPacketProducerChannelMethodResettingName = 1;
const int _mediaPacketProducerChannelMethodRequestingPrimeName = 2;
const int _mediaPacketProducerChannelMethodPrimeCompletedName = 3;
const int _mediaPacketProducerChannelMethodRequestingFlushName = 4;
const int _mediaPacketProducerChannelMethodFlushCompletedName = 5;
const int _mediaPacketProducerChannelMethodAllocatingPayloadBufferName = 6;
const int _mediaPacketProducerChannelMethodPayloadBufferAllocationFailureName = 7;
const int _mediaPacketProducerChannelMethodReleasingPayloadBufferName = 8;
const int _mediaPacketProducerChannelMethodDemandUpdatedName = 9;
const int _mediaPacketProducerChannelMethodProducingPacketName = 10;
const int _mediaPacketProducerChannelMethodRetiringPacketName = 11;

class _MediaPacketProducerChannelServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaPacketProducerChannel {
  static const String serviceName = "mojo::media::logs::MediaPacketProducerChannel";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaPacketProducerChannelServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaPacketProducerChannelProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaPacketProducerChannelProxy p = new MediaPacketProducerChannelProxy.unbound();
    String name = serviceName ?? MediaPacketProducerChannel.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void connecting();
  void resetting();
  void requestingPrime();
  void primeCompleted();
  void requestingFlush();
  void flushCompleted();
  void allocatingPayloadBuffer(int index, int size, int bufferAddress);
  void payloadBufferAllocationFailure(int index, int size);
  void releasingPayloadBuffer(int index, int bufferAddress);
  void demandUpdated(media_transport_mojom.MediaPacketDemand demand);
  void producingPacket(int label, media_transport_mojom.MediaPacket packet, int payloadAddress, int packetsOutstanding);
  void retiringPacket(int label, int packetsOutstanding);
}

abstract class MediaPacketProducerChannelInterface
    implements bindings.MojoInterface<MediaPacketProducerChannel>,
               MediaPacketProducerChannel {
  factory MediaPacketProducerChannelInterface([MediaPacketProducerChannel impl]) =>
      new MediaPacketProducerChannelStub.unbound(impl);

  factory MediaPacketProducerChannelInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaPacketProducerChannel impl]) =>
      new MediaPacketProducerChannelStub.fromEndpoint(endpoint, impl);

  factory MediaPacketProducerChannelInterface.fromMock(
      MediaPacketProducerChannel mock) =>
      new MediaPacketProducerChannelProxy.fromMock(mock);
}

abstract class MediaPacketProducerChannelInterfaceRequest
    implements bindings.MojoInterface<MediaPacketProducerChannel>,
               MediaPacketProducerChannel {
  factory MediaPacketProducerChannelInterfaceRequest() =>
      new MediaPacketProducerChannelProxy.unbound();
}

class _MediaPacketProducerChannelProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaPacketProducerChannel> {
  MediaPacketProducerChannel impl;

  _MediaPacketProducerChannelProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaPacketProducerChannelProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaPacketProducerChannelProxyControl.unbound() : super.unbound();

  String get serviceName => MediaPacketProducerChannel.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketProducerChannelProxyControl($superString)";
  }
}

class MediaPacketProducerChannelProxy
    extends bindings.Proxy<MediaPacketProducerChannel>
    implements MediaPacketProducerChannel,
               MediaPacketProducerChannelInterface,
               MediaPacketProducerChannelInterfaceRequest {
  MediaPacketProducerChannelProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaPacketProducerChannelProxyControl.fromEndpoint(endpoint));

  MediaPacketProducerChannelProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaPacketProducerChannelProxyControl.fromHandle(handle));

  MediaPacketProducerChannelProxy.unbound()
      : super(new _MediaPacketProducerChannelProxyControl.unbound());

  factory MediaPacketProducerChannelProxy.fromMock(MediaPacketProducerChannel mock) {
    MediaPacketProducerChannelProxy newMockedProxy =
        new MediaPacketProducerChannelProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaPacketProducerChannelProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketProducerChannelProxy"));
    return new MediaPacketProducerChannelProxy.fromEndpoint(endpoint);
  }


  void connecting() {
    if (impl != null) {
      impl.connecting();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelConnectingParams();
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodConnectingName);
  }
  void resetting() {
    if (impl != null) {
      impl.resetting();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelResettingParams();
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodResettingName);
  }
  void requestingPrime() {
    if (impl != null) {
      impl.requestingPrime();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelRequestingPrimeParams();
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodRequestingPrimeName);
  }
  void primeCompleted() {
    if (impl != null) {
      impl.primeCompleted();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelPrimeCompletedParams();
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodPrimeCompletedName);
  }
  void requestingFlush() {
    if (impl != null) {
      impl.requestingFlush();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelRequestingFlushParams();
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodRequestingFlushName);
  }
  void flushCompleted() {
    if (impl != null) {
      impl.flushCompleted();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelFlushCompletedParams();
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodFlushCompletedName);
  }
  void allocatingPayloadBuffer(int index, int size, int bufferAddress) {
    if (impl != null) {
      impl.allocatingPayloadBuffer(index, size, bufferAddress);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelAllocatingPayloadBufferParams();
    params.index = index;
    params.size = size;
    params.bufferAddress = bufferAddress;
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodAllocatingPayloadBufferName);
  }
  void payloadBufferAllocationFailure(int index, int size) {
    if (impl != null) {
      impl.payloadBufferAllocationFailure(index, size);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelPayloadBufferAllocationFailureParams();
    params.index = index;
    params.size = size;
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodPayloadBufferAllocationFailureName);
  }
  void releasingPayloadBuffer(int index, int bufferAddress) {
    if (impl != null) {
      impl.releasingPayloadBuffer(index, bufferAddress);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelReleasingPayloadBufferParams();
    params.index = index;
    params.bufferAddress = bufferAddress;
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodReleasingPayloadBufferName);
  }
  void demandUpdated(media_transport_mojom.MediaPacketDemand demand) {
    if (impl != null) {
      impl.demandUpdated(demand);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelDemandUpdatedParams();
    params.demand = demand;
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodDemandUpdatedName);
  }
  void producingPacket(int label, media_transport_mojom.MediaPacket packet, int payloadAddress, int packetsOutstanding) {
    if (impl != null) {
      impl.producingPacket(label, packet, payloadAddress, packetsOutstanding);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelProducingPacketParams();
    params.label = label;
    params.packet = packet;
    params.payloadAddress = payloadAddress;
    params.packetsOutstanding = packetsOutstanding;
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodProducingPacketName);
  }
  void retiringPacket(int label, int packetsOutstanding) {
    if (impl != null) {
      impl.retiringPacket(label, packetsOutstanding);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketProducerChannelRetiringPacketParams();
    params.label = label;
    params.packetsOutstanding = packetsOutstanding;
    ctrl.sendMessage(params,
        _mediaPacketProducerChannelMethodRetiringPacketName);
  }
}

class _MediaPacketProducerChannelStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaPacketProducerChannel> {
  MediaPacketProducerChannel _impl;

  _MediaPacketProducerChannelStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketProducerChannel impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketProducerChannelStubControl.fromHandle(
      core.MojoHandle handle, [MediaPacketProducerChannel impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketProducerChannelStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaPacketProducerChannel.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaPacketProducerChannelMethodConnectingName:
        _impl.connecting();
        break;
      case _mediaPacketProducerChannelMethodResettingName:
        _impl.resetting();
        break;
      case _mediaPacketProducerChannelMethodRequestingPrimeName:
        _impl.requestingPrime();
        break;
      case _mediaPacketProducerChannelMethodPrimeCompletedName:
        _impl.primeCompleted();
        break;
      case _mediaPacketProducerChannelMethodRequestingFlushName:
        _impl.requestingFlush();
        break;
      case _mediaPacketProducerChannelMethodFlushCompletedName:
        _impl.flushCompleted();
        break;
      case _mediaPacketProducerChannelMethodAllocatingPayloadBufferName:
        var params = _MediaPacketProducerChannelAllocatingPayloadBufferParams.deserialize(
            message.payload);
        _impl.allocatingPayloadBuffer(params.index, params.size, params.bufferAddress);
        break;
      case _mediaPacketProducerChannelMethodPayloadBufferAllocationFailureName:
        var params = _MediaPacketProducerChannelPayloadBufferAllocationFailureParams.deserialize(
            message.payload);
        _impl.payloadBufferAllocationFailure(params.index, params.size);
        break;
      case _mediaPacketProducerChannelMethodReleasingPayloadBufferName:
        var params = _MediaPacketProducerChannelReleasingPayloadBufferParams.deserialize(
            message.payload);
        _impl.releasingPayloadBuffer(params.index, params.bufferAddress);
        break;
      case _mediaPacketProducerChannelMethodDemandUpdatedName:
        var params = _MediaPacketProducerChannelDemandUpdatedParams.deserialize(
            message.payload);
        _impl.demandUpdated(params.demand);
        break;
      case _mediaPacketProducerChannelMethodProducingPacketName:
        var params = _MediaPacketProducerChannelProducingPacketParams.deserialize(
            message.payload);
        _impl.producingPacket(params.label, params.packet, params.payloadAddress, params.packetsOutstanding);
        break;
      case _mediaPacketProducerChannelMethodRetiringPacketName:
        var params = _MediaPacketProducerChannelRetiringPacketParams.deserialize(
            message.payload);
        _impl.retiringPacket(params.label, params.packetsOutstanding);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaPacketProducerChannel get impl => _impl;
  set impl(MediaPacketProducerChannel d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketProducerChannelStubControl($superString)";
  }

  int get version => 0;
}

class MediaPacketProducerChannelStub
    extends bindings.Stub<MediaPacketProducerChannel>
    implements MediaPacketProducerChannel,
               MediaPacketProducerChannelInterface,
               MediaPacketProducerChannelInterfaceRequest {
  MediaPacketProducerChannelStub.unbound([MediaPacketProducerChannel impl])
      : super(new _MediaPacketProducerChannelStubControl.unbound(impl));

  MediaPacketProducerChannelStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketProducerChannel impl])
      : super(new _MediaPacketProducerChannelStubControl.fromEndpoint(endpoint, impl));

  MediaPacketProducerChannelStub.fromHandle(
      core.MojoHandle handle, [MediaPacketProducerChannel impl])
      : super(new _MediaPacketProducerChannelStubControl.fromHandle(handle, impl));

  static MediaPacketProducerChannelStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketProducerChannelStub"));
    return new MediaPacketProducerChannelStub.fromEndpoint(endpoint);
  }


  void connecting() {
    return impl.connecting();
  }
  void resetting() {
    return impl.resetting();
  }
  void requestingPrime() {
    return impl.requestingPrime();
  }
  void primeCompleted() {
    return impl.primeCompleted();
  }
  void requestingFlush() {
    return impl.requestingFlush();
  }
  void flushCompleted() {
    return impl.flushCompleted();
  }
  void allocatingPayloadBuffer(int index, int size, int bufferAddress) {
    return impl.allocatingPayloadBuffer(index, size, bufferAddress);
  }
  void payloadBufferAllocationFailure(int index, int size) {
    return impl.payloadBufferAllocationFailure(index, size);
  }
  void releasingPayloadBuffer(int index, int bufferAddress) {
    return impl.releasingPayloadBuffer(index, bufferAddress);
  }
  void demandUpdated(media_transport_mojom.MediaPacketDemand demand) {
    return impl.demandUpdated(demand);
  }
  void producingPacket(int label, media_transport_mojom.MediaPacket packet, int payloadAddress, int packetsOutstanding) {
    return impl.producingPacket(label, packet, payloadAddress, packetsOutstanding);
  }
  void retiringPacket(int label, int packetsOutstanding) {
    return impl.retiringPacket(label, packetsOutstanding);
  }
}



