// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_packet_consumer_channel_mojom;
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/media/media_transport.mojom.dart' as media_transport_mojom;



class _MediaPacketConsumerChannelDemandSetParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  media_transport_mojom.MediaPacketDemand demand = null;

  _MediaPacketConsumerChannelDemandSetParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelDemandSetParams.init(
    media_transport_mojom.MediaPacketDemand this.demand
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelDemandSetParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelDemandSetParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelDemandSetParams result = new _MediaPacketConsumerChannelDemandSetParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.demand = media_transport_mojom.MediaPacketDemand.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelDemandSetParams";
    String fieldName;
    try {
      fieldName = "demand";
      encoder0.encodeStruct(demand, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelDemandSetParams("
           "demand: $demand" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["demand"] = demand;
    return map;
  }
}


class _MediaPacketConsumerChannelResetParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerChannelResetParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelResetParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelResetParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelResetParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelResetParams result = new _MediaPacketConsumerChannelResetParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelResetParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelResetParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerChannelFailedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerChannelFailedParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelFailedParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelFailedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelFailedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelFailedParams result = new _MediaPacketConsumerChannelFailedParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelFailedParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelFailedParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerChannelRespondingToGetDemandUpdateParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  media_transport_mojom.MediaPacketDemand demand = null;

  _MediaPacketConsumerChannelRespondingToGetDemandUpdateParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelRespondingToGetDemandUpdateParams.init(
    media_transport_mojom.MediaPacketDemand this.demand
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelRespondingToGetDemandUpdateParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelRespondingToGetDemandUpdateParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelRespondingToGetDemandUpdateParams result = new _MediaPacketConsumerChannelRespondingToGetDemandUpdateParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.demand = media_transport_mojom.MediaPacketDemand.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelRespondingToGetDemandUpdateParams";
    String fieldName;
    try {
      fieldName = "demand";
      encoder0.encodeStruct(demand, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelRespondingToGetDemandUpdateParams("
           "demand: $demand" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["demand"] = demand;
    return map;
  }
}


class _MediaPacketConsumerChannelAddPayloadBufferRequestedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int id = 0;
  int size = 0;

  _MediaPacketConsumerChannelAddPayloadBufferRequestedParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelAddPayloadBufferRequestedParams.init(
    int this.id, 
    int this.size
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelAddPayloadBufferRequestedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelAddPayloadBufferRequestedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelAddPayloadBufferRequestedParams result = new _MediaPacketConsumerChannelAddPayloadBufferRequestedParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.id = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.size = decoder0.decodeUint64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelAddPayloadBufferRequestedParams";
    String fieldName;
    try {
      fieldName = "id";
      encoder0.encodeUint32(id, 8);
      fieldName = "size";
      encoder0.encodeUint64(size, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelAddPayloadBufferRequestedParams("
           "id: $id" ", "
           "size: $size" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["id"] = id;
    map["size"] = size;
    return map;
  }
}


class _MediaPacketConsumerChannelRemovePayloadBufferRequestedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int id = 0;

  _MediaPacketConsumerChannelRemovePayloadBufferRequestedParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelRemovePayloadBufferRequestedParams.init(
    int this.id
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelRemovePayloadBufferRequestedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelRemovePayloadBufferRequestedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelRemovePayloadBufferRequestedParams result = new _MediaPacketConsumerChannelRemovePayloadBufferRequestedParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.id = decoder0.decodeUint32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelRemovePayloadBufferRequestedParams";
    String fieldName;
    try {
      fieldName = "id";
      encoder0.encodeUint32(id, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelRemovePayloadBufferRequestedParams("
           "id: $id" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["id"] = id;
    return map;
  }
}


class _MediaPacketConsumerChannelPrimeRequestedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerChannelPrimeRequestedParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelPrimeRequestedParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelPrimeRequestedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelPrimeRequestedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelPrimeRequestedParams result = new _MediaPacketConsumerChannelPrimeRequestedParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelPrimeRequestedParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelPrimeRequestedParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerChannelCompletingPrimeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerChannelCompletingPrimeParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelCompletingPrimeParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelCompletingPrimeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelCompletingPrimeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelCompletingPrimeParams result = new _MediaPacketConsumerChannelCompletingPrimeParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelCompletingPrimeParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelCompletingPrimeParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerChannelFlushRequestedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerChannelFlushRequestedParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelFlushRequestedParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelFlushRequestedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelFlushRequestedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelFlushRequestedParams result = new _MediaPacketConsumerChannelFlushRequestedParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelFlushRequestedParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelFlushRequestedParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerChannelCompletingFlushParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPacketConsumerChannelCompletingFlushParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelCompletingFlushParams.init(
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelCompletingFlushParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelCompletingFlushParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelCompletingFlushParams result = new _MediaPacketConsumerChannelCompletingFlushParams();
    bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelCompletingFlushParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelCompletingFlushParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPacketConsumerChannelPacketSuppliedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  int label = 0;
  media_transport_mojom.MediaPacket packet = null;
  int payloadAddress = 0;
  int packetsOutstanding = 0;

  _MediaPacketConsumerChannelPacketSuppliedParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelPacketSuppliedParams.init(
    int this.label, 
    media_transport_mojom.MediaPacket this.packet, 
    int this.payloadAddress, 
    int this.packetsOutstanding
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelPacketSuppliedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelPacketSuppliedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelPacketSuppliedParams result = new _MediaPacketConsumerChannelPacketSuppliedParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.label = decoder0.decodeUint64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.packet = media_transport_mojom.MediaPacket.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.payloadAddress = decoder0.decodeUint64(24);
    }
    if (mainDataHeader.version >= 0) {
      
      result.packetsOutstanding = decoder0.decodeUint32(32);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelPacketSuppliedParams";
    String fieldName;
    try {
      fieldName = "label";
      encoder0.encodeUint64(label, 8);
      fieldName = "packet";
      encoder0.encodeStruct(packet, 16, false);
      fieldName = "payloadAddress";
      encoder0.encodeUint64(payloadAddress, 24);
      fieldName = "packetsOutstanding";
      encoder0.encodeUint32(packetsOutstanding, 32);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelPacketSuppliedParams("
           "label: $label" ", "
           "packet: $packet" ", "
           "payloadAddress: $payloadAddress" ", "
           "packetsOutstanding: $packetsOutstanding" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["label"] = label;
    map["packet"] = packet;
    map["payloadAddress"] = payloadAddress;
    map["packetsOutstanding"] = packetsOutstanding;
    return map;
  }
}


class _MediaPacketConsumerChannelReturningPacketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int label = 0;
  int packetsOutstanding = 0;

  _MediaPacketConsumerChannelReturningPacketParams() : super(kVersions.last.size);

  _MediaPacketConsumerChannelReturningPacketParams.init(
    int this.label, 
    int this.packetsOutstanding
  ) : super(kVersions.last.size);

  static _MediaPacketConsumerChannelReturningPacketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPacketConsumerChannelReturningPacketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPacketConsumerChannelReturningPacketParams result = new _MediaPacketConsumerChannelReturningPacketParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.label = decoder0.decodeUint64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.packetsOutstanding = decoder0.decodeUint32(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPacketConsumerChannelReturningPacketParams";
    String fieldName;
    try {
      fieldName = "label";
      encoder0.encodeUint64(label, 8);
      fieldName = "packetsOutstanding";
      encoder0.encodeUint32(packetsOutstanding, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPacketConsumerChannelReturningPacketParams("
           "label: $label" ", "
           "packetsOutstanding: $packetsOutstanding" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["label"] = label;
    map["packetsOutstanding"] = packetsOutstanding;
    return map;
  }
}

const int _mediaPacketConsumerChannelMethodDemandSetName = 0;
const int _mediaPacketConsumerChannelMethodResetName = 1;
const int _mediaPacketConsumerChannelMethodFailedName = 2;
const int _mediaPacketConsumerChannelMethodRespondingToGetDemandUpdateName = 3;
const int _mediaPacketConsumerChannelMethodAddPayloadBufferRequestedName = 4;
const int _mediaPacketConsumerChannelMethodRemovePayloadBufferRequestedName = 5;
const int _mediaPacketConsumerChannelMethodPrimeRequestedName = 6;
const int _mediaPacketConsumerChannelMethodCompletingPrimeName = 7;
const int _mediaPacketConsumerChannelMethodFlushRequestedName = 8;
const int _mediaPacketConsumerChannelMethodCompletingFlushName = 9;
const int _mediaPacketConsumerChannelMethodPacketSuppliedName = 10;
const int _mediaPacketConsumerChannelMethodReturningPacketName = 11;

class _MediaPacketConsumerChannelServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaPacketConsumerChannel {
  static const String serviceName = "mojo::media::logs::MediaPacketConsumerChannel";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaPacketConsumerChannelServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaPacketConsumerChannelProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaPacketConsumerChannelProxy p = new MediaPacketConsumerChannelProxy.unbound();
    String name = serviceName ?? MediaPacketConsumerChannel.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void demandSet(media_transport_mojom.MediaPacketDemand demand);
  void reset();
  void failed();
  void respondingToGetDemandUpdate(media_transport_mojom.MediaPacketDemand demand);
  void addPayloadBufferRequested(int id, int size);
  void removePayloadBufferRequested(int id);
  void primeRequested();
  void completingPrime();
  void flushRequested();
  void completingFlush();
  void packetSupplied(int label, media_transport_mojom.MediaPacket packet, int payloadAddress, int packetsOutstanding);
  void returningPacket(int label, int packetsOutstanding);
}

abstract class MediaPacketConsumerChannelInterface
    implements bindings.MojoInterface<MediaPacketConsumerChannel>,
               MediaPacketConsumerChannel {
  factory MediaPacketConsumerChannelInterface([MediaPacketConsumerChannel impl]) =>
      new MediaPacketConsumerChannelStub.unbound(impl);

  factory MediaPacketConsumerChannelInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaPacketConsumerChannel impl]) =>
      new MediaPacketConsumerChannelStub.fromEndpoint(endpoint, impl);

  factory MediaPacketConsumerChannelInterface.fromMock(
      MediaPacketConsumerChannel mock) =>
      new MediaPacketConsumerChannelProxy.fromMock(mock);
}

abstract class MediaPacketConsumerChannelInterfaceRequest
    implements bindings.MojoInterface<MediaPacketConsumerChannel>,
               MediaPacketConsumerChannel {
  factory MediaPacketConsumerChannelInterfaceRequest() =>
      new MediaPacketConsumerChannelProxy.unbound();
}

class _MediaPacketConsumerChannelProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaPacketConsumerChannel> {
  MediaPacketConsumerChannel impl;

  _MediaPacketConsumerChannelProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaPacketConsumerChannelProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaPacketConsumerChannelProxyControl.unbound() : super.unbound();

  String get serviceName => MediaPacketConsumerChannel.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketConsumerChannelProxyControl($superString)";
  }
}

class MediaPacketConsumerChannelProxy
    extends bindings.Proxy<MediaPacketConsumerChannel>
    implements MediaPacketConsumerChannel,
               MediaPacketConsumerChannelInterface,
               MediaPacketConsumerChannelInterfaceRequest {
  MediaPacketConsumerChannelProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaPacketConsumerChannelProxyControl.fromEndpoint(endpoint));

  MediaPacketConsumerChannelProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaPacketConsumerChannelProxyControl.fromHandle(handle));

  MediaPacketConsumerChannelProxy.unbound()
      : super(new _MediaPacketConsumerChannelProxyControl.unbound());

  factory MediaPacketConsumerChannelProxy.fromMock(MediaPacketConsumerChannel mock) {
    MediaPacketConsumerChannelProxy newMockedProxy =
        new MediaPacketConsumerChannelProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaPacketConsumerChannelProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketConsumerChannelProxy"));
    return new MediaPacketConsumerChannelProxy.fromEndpoint(endpoint);
  }


  void demandSet(media_transport_mojom.MediaPacketDemand demand) {
    if (impl != null) {
      impl.demandSet(demand);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelDemandSetParams();
    params.demand = demand;
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodDemandSetName);
  }
  void reset() {
    if (impl != null) {
      impl.reset();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelResetParams();
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodResetName);
  }
  void failed() {
    if (impl != null) {
      impl.failed();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelFailedParams();
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodFailedName);
  }
  void respondingToGetDemandUpdate(media_transport_mojom.MediaPacketDemand demand) {
    if (impl != null) {
      impl.respondingToGetDemandUpdate(demand);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelRespondingToGetDemandUpdateParams();
    params.demand = demand;
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodRespondingToGetDemandUpdateName);
  }
  void addPayloadBufferRequested(int id, int size) {
    if (impl != null) {
      impl.addPayloadBufferRequested(id, size);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelAddPayloadBufferRequestedParams();
    params.id = id;
    params.size = size;
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodAddPayloadBufferRequestedName);
  }
  void removePayloadBufferRequested(int id) {
    if (impl != null) {
      impl.removePayloadBufferRequested(id);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelRemovePayloadBufferRequestedParams();
    params.id = id;
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodRemovePayloadBufferRequestedName);
  }
  void primeRequested() {
    if (impl != null) {
      impl.primeRequested();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelPrimeRequestedParams();
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodPrimeRequestedName);
  }
  void completingPrime() {
    if (impl != null) {
      impl.completingPrime();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelCompletingPrimeParams();
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodCompletingPrimeName);
  }
  void flushRequested() {
    if (impl != null) {
      impl.flushRequested();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelFlushRequestedParams();
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodFlushRequestedName);
  }
  void completingFlush() {
    if (impl != null) {
      impl.completingFlush();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelCompletingFlushParams();
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodCompletingFlushName);
  }
  void packetSupplied(int label, media_transport_mojom.MediaPacket packet, int payloadAddress, int packetsOutstanding) {
    if (impl != null) {
      impl.packetSupplied(label, packet, payloadAddress, packetsOutstanding);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelPacketSuppliedParams();
    params.label = label;
    params.packet = packet;
    params.payloadAddress = payloadAddress;
    params.packetsOutstanding = packetsOutstanding;
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodPacketSuppliedName);
  }
  void returningPacket(int label, int packetsOutstanding) {
    if (impl != null) {
      impl.returningPacket(label, packetsOutstanding);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPacketConsumerChannelReturningPacketParams();
    params.label = label;
    params.packetsOutstanding = packetsOutstanding;
    ctrl.sendMessage(params,
        _mediaPacketConsumerChannelMethodReturningPacketName);
  }
}

class _MediaPacketConsumerChannelStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaPacketConsumerChannel> {
  MediaPacketConsumerChannel _impl;

  _MediaPacketConsumerChannelStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketConsumerChannel impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketConsumerChannelStubControl.fromHandle(
      core.MojoHandle handle, [MediaPacketConsumerChannel impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPacketConsumerChannelStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaPacketConsumerChannel.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaPacketConsumerChannelMethodDemandSetName:
        var params = _MediaPacketConsumerChannelDemandSetParams.deserialize(
            message.payload);
        _impl.demandSet(params.demand);
        break;
      case _mediaPacketConsumerChannelMethodResetName:
        _impl.reset();
        break;
      case _mediaPacketConsumerChannelMethodFailedName:
        _impl.failed();
        break;
      case _mediaPacketConsumerChannelMethodRespondingToGetDemandUpdateName:
        var params = _MediaPacketConsumerChannelRespondingToGetDemandUpdateParams.deserialize(
            message.payload);
        _impl.respondingToGetDemandUpdate(params.demand);
        break;
      case _mediaPacketConsumerChannelMethodAddPayloadBufferRequestedName:
        var params = _MediaPacketConsumerChannelAddPayloadBufferRequestedParams.deserialize(
            message.payload);
        _impl.addPayloadBufferRequested(params.id, params.size);
        break;
      case _mediaPacketConsumerChannelMethodRemovePayloadBufferRequestedName:
        var params = _MediaPacketConsumerChannelRemovePayloadBufferRequestedParams.deserialize(
            message.payload);
        _impl.removePayloadBufferRequested(params.id);
        break;
      case _mediaPacketConsumerChannelMethodPrimeRequestedName:
        _impl.primeRequested();
        break;
      case _mediaPacketConsumerChannelMethodCompletingPrimeName:
        _impl.completingPrime();
        break;
      case _mediaPacketConsumerChannelMethodFlushRequestedName:
        _impl.flushRequested();
        break;
      case _mediaPacketConsumerChannelMethodCompletingFlushName:
        _impl.completingFlush();
        break;
      case _mediaPacketConsumerChannelMethodPacketSuppliedName:
        var params = _MediaPacketConsumerChannelPacketSuppliedParams.deserialize(
            message.payload);
        _impl.packetSupplied(params.label, params.packet, params.payloadAddress, params.packetsOutstanding);
        break;
      case _mediaPacketConsumerChannelMethodReturningPacketName:
        var params = _MediaPacketConsumerChannelReturningPacketParams.deserialize(
            message.payload);
        _impl.returningPacket(params.label, params.packetsOutstanding);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaPacketConsumerChannel get impl => _impl;
  set impl(MediaPacketConsumerChannel d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPacketConsumerChannelStubControl($superString)";
  }

  int get version => 0;
}

class MediaPacketConsumerChannelStub
    extends bindings.Stub<MediaPacketConsumerChannel>
    implements MediaPacketConsumerChannel,
               MediaPacketConsumerChannelInterface,
               MediaPacketConsumerChannelInterfaceRequest {
  MediaPacketConsumerChannelStub.unbound([MediaPacketConsumerChannel impl])
      : super(new _MediaPacketConsumerChannelStubControl.unbound(impl));

  MediaPacketConsumerChannelStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPacketConsumerChannel impl])
      : super(new _MediaPacketConsumerChannelStubControl.fromEndpoint(endpoint, impl));

  MediaPacketConsumerChannelStub.fromHandle(
      core.MojoHandle handle, [MediaPacketConsumerChannel impl])
      : super(new _MediaPacketConsumerChannelStubControl.fromHandle(handle, impl));

  static MediaPacketConsumerChannelStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPacketConsumerChannelStub"));
    return new MediaPacketConsumerChannelStub.fromEndpoint(endpoint);
  }


  void demandSet(media_transport_mojom.MediaPacketDemand demand) {
    return impl.demandSet(demand);
  }
  void reset() {
    return impl.reset();
  }
  void failed() {
    return impl.failed();
  }
  void respondingToGetDemandUpdate(media_transport_mojom.MediaPacketDemand demand) {
    return impl.respondingToGetDemandUpdate(demand);
  }
  void addPayloadBufferRequested(int id, int size) {
    return impl.addPayloadBufferRequested(id, size);
  }
  void removePayloadBufferRequested(int id) {
    return impl.removePayloadBufferRequested(id);
  }
  void primeRequested() {
    return impl.primeRequested();
  }
  void completingPrime() {
    return impl.completingPrime();
  }
  void flushRequested() {
    return impl.flushRequested();
  }
  void completingFlush() {
    return impl.completingFlush();
  }
  void packetSupplied(int label, media_transport_mojom.MediaPacket packet, int payloadAddress, int packetsOutstanding) {
    return impl.packetSupplied(label, packet, payloadAddress, packetsOutstanding);
  }
  void returningPacket(int label, int packetsOutstanding) {
    return impl.returningPacket(label, packetsOutstanding);
  }
}



