// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_sink_channel_mojom;
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/media/media_types.mojom.dart' as media_types_mojom;



class _MediaSinkChannelConfigParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  media_types_mojom.MediaType inputType = null;
  media_types_mojom.MediaType outputType = null;
  int consumerAddress = 0;
  int producerAddress = 0;

  _MediaSinkChannelConfigParams() : super(kVersions.last.size);

  _MediaSinkChannelConfigParams.init(
    media_types_mojom.MediaType this.inputType, 
    media_types_mojom.MediaType this.outputType, 
    int this.consumerAddress, 
    int this.producerAddress
  ) : super(kVersions.last.size);

  static _MediaSinkChannelConfigParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaSinkChannelConfigParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaSinkChannelConfigParams result = new _MediaSinkChannelConfigParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.inputType = media_types_mojom.MediaType.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.outputType = media_types_mojom.MediaType.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.consumerAddress = decoder0.decodeUint64(24);
    }
    if (mainDataHeader.version >= 0) {
      
      result.producerAddress = decoder0.decodeUint64(32);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaSinkChannelConfigParams";
    String fieldName;
    try {
      fieldName = "inputType";
      encoder0.encodeStruct(inputType, 8, false);
      fieldName = "outputType";
      encoder0.encodeStruct(outputType, 16, false);
      fieldName = "consumerAddress";
      encoder0.encodeUint64(consumerAddress, 24);
      fieldName = "producerAddress";
      encoder0.encodeUint64(producerAddress, 32);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaSinkChannelConfigParams("
           "inputType: $inputType" ", "
           "outputType: $outputType" ", "
           "consumerAddress: $consumerAddress" ", "
           "producerAddress: $producerAddress" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["inputType"] = inputType;
    map["outputType"] = outputType;
    map["consumerAddress"] = consumerAddress;
    map["producerAddress"] = producerAddress;
    return map;
  }
}

const int _mediaSinkChannelMethodConfigName = 0;

class _MediaSinkChannelServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaSinkChannel {
  static const String serviceName = "mojo::media::logs::MediaSinkChannel";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaSinkChannelServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaSinkChannelProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaSinkChannelProxy p = new MediaSinkChannelProxy.unbound();
    String name = serviceName ?? MediaSinkChannel.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void config(media_types_mojom.MediaType inputType, media_types_mojom.MediaType outputType, int consumerAddress, int producerAddress);
}

abstract class MediaSinkChannelInterface
    implements bindings.MojoInterface<MediaSinkChannel>,
               MediaSinkChannel {
  factory MediaSinkChannelInterface([MediaSinkChannel impl]) =>
      new MediaSinkChannelStub.unbound(impl);

  factory MediaSinkChannelInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaSinkChannel impl]) =>
      new MediaSinkChannelStub.fromEndpoint(endpoint, impl);

  factory MediaSinkChannelInterface.fromMock(
      MediaSinkChannel mock) =>
      new MediaSinkChannelProxy.fromMock(mock);
}

abstract class MediaSinkChannelInterfaceRequest
    implements bindings.MojoInterface<MediaSinkChannel>,
               MediaSinkChannel {
  factory MediaSinkChannelInterfaceRequest() =>
      new MediaSinkChannelProxy.unbound();
}

class _MediaSinkChannelProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaSinkChannel> {
  MediaSinkChannel impl;

  _MediaSinkChannelProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaSinkChannelProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaSinkChannelProxyControl.unbound() : super.unbound();

  String get serviceName => MediaSinkChannel.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaSinkChannelProxyControl($superString)";
  }
}

class MediaSinkChannelProxy
    extends bindings.Proxy<MediaSinkChannel>
    implements MediaSinkChannel,
               MediaSinkChannelInterface,
               MediaSinkChannelInterfaceRequest {
  MediaSinkChannelProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaSinkChannelProxyControl.fromEndpoint(endpoint));

  MediaSinkChannelProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaSinkChannelProxyControl.fromHandle(handle));

  MediaSinkChannelProxy.unbound()
      : super(new _MediaSinkChannelProxyControl.unbound());

  factory MediaSinkChannelProxy.fromMock(MediaSinkChannel mock) {
    MediaSinkChannelProxy newMockedProxy =
        new MediaSinkChannelProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaSinkChannelProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaSinkChannelProxy"));
    return new MediaSinkChannelProxy.fromEndpoint(endpoint);
  }


  void config(media_types_mojom.MediaType inputType, media_types_mojom.MediaType outputType, int consumerAddress, int producerAddress) {
    if (impl != null) {
      impl.config(inputType, outputType, consumerAddress, producerAddress);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaSinkChannelConfigParams();
    params.inputType = inputType;
    params.outputType = outputType;
    params.consumerAddress = consumerAddress;
    params.producerAddress = producerAddress;
    ctrl.sendMessage(params,
        _mediaSinkChannelMethodConfigName);
  }
}

class _MediaSinkChannelStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaSinkChannel> {
  MediaSinkChannel _impl;

  _MediaSinkChannelStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaSinkChannel impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaSinkChannelStubControl.fromHandle(
      core.MojoHandle handle, [MediaSinkChannel impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaSinkChannelStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaSinkChannel.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaSinkChannelMethodConfigName:
        var params = _MediaSinkChannelConfigParams.deserialize(
            message.payload);
        _impl.config(params.inputType, params.outputType, params.consumerAddress, params.producerAddress);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaSinkChannel get impl => _impl;
  set impl(MediaSinkChannel d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaSinkChannelStubControl($superString)";
  }

  int get version => 0;
}

class MediaSinkChannelStub
    extends bindings.Stub<MediaSinkChannel>
    implements MediaSinkChannel,
               MediaSinkChannelInterface,
               MediaSinkChannelInterfaceRequest {
  MediaSinkChannelStub.unbound([MediaSinkChannel impl])
      : super(new _MediaSinkChannelStubControl.unbound(impl));

  MediaSinkChannelStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaSinkChannel impl])
      : super(new _MediaSinkChannelStubControl.fromEndpoint(endpoint, impl));

  MediaSinkChannelStub.fromHandle(
      core.MojoHandle handle, [MediaSinkChannel impl])
      : super(new _MediaSinkChannelStubControl.fromHandle(handle, impl));

  static MediaSinkChannelStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaSinkChannelStub"));
    return new MediaSinkChannelStub.fromEndpoint(endpoint);
  }


  void config(media_types_mojom.MediaType inputType, media_types_mojom.MediaType outputType, int consumerAddress, int producerAddress) {
    return impl.config(inputType, outputType, consumerAddress, producerAddress);
  }
}



