// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library viewport_parameter_listener_mojom;
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class _ViewportParameterListenerOnVSyncParametersUpdatedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int timebase = 0;
  int interval = 0;

  _ViewportParameterListenerOnVSyncParametersUpdatedParams() : super(kVersions.last.size);

  _ViewportParameterListenerOnVSyncParametersUpdatedParams.init(
    int this.timebase, 
    int this.interval
  ) : super(kVersions.last.size);

  static _ViewportParameterListenerOnVSyncParametersUpdatedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ViewportParameterListenerOnVSyncParametersUpdatedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ViewportParameterListenerOnVSyncParametersUpdatedParams result = new _ViewportParameterListenerOnVSyncParametersUpdatedParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.timebase = decoder0.decodeInt64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.interval = decoder0.decodeInt64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ViewportParameterListenerOnVSyncParametersUpdatedParams";
    String fieldName;
    try {
      fieldName = "timebase";
      encoder0.encodeInt64(timebase, 8);
      fieldName = "interval";
      encoder0.encodeInt64(interval, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ViewportParameterListenerOnVSyncParametersUpdatedParams("
           "timebase: $timebase" ", "
           "interval: $interval" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["timebase"] = timebase;
    map["interval"] = interval;
    return map;
  }
}

const int _viewportParameterListenerMethodOnVSyncParametersUpdatedName = 0;

class _ViewportParameterListenerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class ViewportParameterListener {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ViewportParameterListenerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ViewportParameterListenerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ViewportParameterListenerProxy p = new ViewportParameterListenerProxy.unbound();
    String name = serviceName ?? ViewportParameterListener.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void onVSyncParametersUpdated(int timebase, int interval);
}

abstract class ViewportParameterListenerInterface
    implements bindings.MojoInterface<ViewportParameterListener>,
               ViewportParameterListener {
  factory ViewportParameterListenerInterface([ViewportParameterListener impl]) =>
      new ViewportParameterListenerStub.unbound(impl);

  factory ViewportParameterListenerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [ViewportParameterListener impl]) =>
      new ViewportParameterListenerStub.fromEndpoint(endpoint, impl);

  factory ViewportParameterListenerInterface.fromMock(
      ViewportParameterListener mock) =>
      new ViewportParameterListenerProxy.fromMock(mock);
}

abstract class ViewportParameterListenerInterfaceRequest
    implements bindings.MojoInterface<ViewportParameterListener>,
               ViewportParameterListener {
  factory ViewportParameterListenerInterfaceRequest() =>
      new ViewportParameterListenerProxy.unbound();
}

class _ViewportParameterListenerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<ViewportParameterListener> {
  ViewportParameterListener impl;

  _ViewportParameterListenerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ViewportParameterListenerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ViewportParameterListenerProxyControl.unbound() : super.unbound();

  String get serviceName => ViewportParameterListener.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ViewportParameterListenerProxyControl($superString)";
  }
}

class ViewportParameterListenerProxy
    extends bindings.Proxy<ViewportParameterListener>
    implements ViewportParameterListener,
               ViewportParameterListenerInterface,
               ViewportParameterListenerInterfaceRequest {
  ViewportParameterListenerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ViewportParameterListenerProxyControl.fromEndpoint(endpoint));

  ViewportParameterListenerProxy.fromHandle(core.MojoHandle handle)
      : super(new _ViewportParameterListenerProxyControl.fromHandle(handle));

  ViewportParameterListenerProxy.unbound()
      : super(new _ViewportParameterListenerProxyControl.unbound());

  factory ViewportParameterListenerProxy.fromMock(ViewportParameterListener mock) {
    ViewportParameterListenerProxy newMockedProxy =
        new ViewportParameterListenerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ViewportParameterListenerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ViewportParameterListenerProxy"));
    return new ViewportParameterListenerProxy.fromEndpoint(endpoint);
  }


  void onVSyncParametersUpdated(int timebase, int interval) {
    if (impl != null) {
      impl.onVSyncParametersUpdated(timebase, interval);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _ViewportParameterListenerOnVSyncParametersUpdatedParams();
    params.timebase = timebase;
    params.interval = interval;
    ctrl.sendMessage(params,
        _viewportParameterListenerMethodOnVSyncParametersUpdatedName);
  }
}

class _ViewportParameterListenerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<ViewportParameterListener> {
  ViewportParameterListener _impl;

  _ViewportParameterListenerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ViewportParameterListener impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ViewportParameterListenerStubControl.fromHandle(
      core.MojoHandle handle, [ViewportParameterListener impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ViewportParameterListenerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => ViewportParameterListener.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _viewportParameterListenerMethodOnVSyncParametersUpdatedName:
        var params = _ViewportParameterListenerOnVSyncParametersUpdatedParams.deserialize(
            message.payload);
        _impl.onVSyncParametersUpdated(params.timebase, params.interval);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  ViewportParameterListener get impl => _impl;
  set impl(ViewportParameterListener d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ViewportParameterListenerStubControl($superString)";
  }

  int get version => 0;
}

class ViewportParameterListenerStub
    extends bindings.Stub<ViewportParameterListener>
    implements ViewportParameterListener,
               ViewportParameterListenerInterface,
               ViewportParameterListenerInterfaceRequest {
  ViewportParameterListenerStub.unbound([ViewportParameterListener impl])
      : super(new _ViewportParameterListenerStubControl.unbound(impl));

  ViewportParameterListenerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ViewportParameterListener impl])
      : super(new _ViewportParameterListenerStubControl.fromEndpoint(endpoint, impl));

  ViewportParameterListenerStub.fromHandle(
      core.MojoHandle handle, [ViewportParameterListener impl])
      : super(new _ViewportParameterListenerStubControl.fromHandle(handle, impl));

  static ViewportParameterListenerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ViewportParameterListenerStub"));
    return new ViewportParameterListenerStub.fromEndpoint(endpoint);
  }


  void onVSyncParametersUpdated(int timebase, int interval) {
    return impl.onVSyncParametersUpdated(timebase, interval);
  }
}



