// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library gpu_mojom;
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/command_buffer.mojom.dart' as command_buffer_mojom;



class _GpuCreateOffscreenGles2ContextParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  command_buffer_mojom.CommandBufferInterfaceRequest gles2Client = null;

  _GpuCreateOffscreenGles2ContextParams() : super(kVersions.last.size);

  _GpuCreateOffscreenGles2ContextParams.init(
    command_buffer_mojom.CommandBufferInterfaceRequest this.gles2Client
  ) : super(kVersions.last.size);

  static _GpuCreateOffscreenGles2ContextParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _GpuCreateOffscreenGles2ContextParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GpuCreateOffscreenGles2ContextParams result = new _GpuCreateOffscreenGles2ContextParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.gles2Client = decoder0.decodeInterfaceRequest(8, false, command_buffer_mojom.CommandBufferStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_GpuCreateOffscreenGles2ContextParams";
    String fieldName;
    try {
      fieldName = "gles2Client";
      encoder0.encodeInterfaceRequest(gles2Client, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_GpuCreateOffscreenGles2ContextParams("
           "gles2Client: $gles2Client" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _gpuMethodCreateOffscreenGles2ContextName = 0;

class _GpuServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Gpu {
  static const String serviceName = "mojo::Gpu";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _GpuServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static GpuProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    GpuProxy p = new GpuProxy.unbound();
    String name = serviceName ?? Gpu.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void createOffscreenGles2Context(command_buffer_mojom.CommandBufferInterfaceRequest gles2Client);
}

abstract class GpuInterface
    implements bindings.MojoInterface<Gpu>,
               Gpu {
  factory GpuInterface([Gpu impl]) =>
      new GpuStub.unbound(impl);

  factory GpuInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Gpu impl]) =>
      new GpuStub.fromEndpoint(endpoint, impl);

  factory GpuInterface.fromMock(
      Gpu mock) =>
      new GpuProxy.fromMock(mock);
}

abstract class GpuInterfaceRequest
    implements bindings.MojoInterface<Gpu>,
               Gpu {
  factory GpuInterfaceRequest() =>
      new GpuProxy.unbound();
}

class _GpuProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Gpu> {
  Gpu impl;

  _GpuProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _GpuProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _GpuProxyControl.unbound() : super.unbound();

  String get serviceName => Gpu.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GpuProxyControl($superString)";
  }
}

class GpuProxy
    extends bindings.Proxy<Gpu>
    implements Gpu,
               GpuInterface,
               GpuInterfaceRequest {
  GpuProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _GpuProxyControl.fromEndpoint(endpoint));

  GpuProxy.fromHandle(core.MojoHandle handle)
      : super(new _GpuProxyControl.fromHandle(handle));

  GpuProxy.unbound()
      : super(new _GpuProxyControl.unbound());

  factory GpuProxy.fromMock(Gpu mock) {
    GpuProxy newMockedProxy =
        new GpuProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static GpuProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GpuProxy"));
    return new GpuProxy.fromEndpoint(endpoint);
  }


  void createOffscreenGles2Context(command_buffer_mojom.CommandBufferInterfaceRequest gles2Client) {
    if (impl != null) {
      impl.createOffscreenGles2Context(gles2Client);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GpuCreateOffscreenGles2ContextParams();
    params.gles2Client = gles2Client;
    ctrl.sendMessage(params,
        _gpuMethodCreateOffscreenGles2ContextName);
  }
}

class _GpuStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Gpu> {
  Gpu _impl;

  _GpuStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Gpu impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _GpuStubControl.fromHandle(
      core.MojoHandle handle, [Gpu impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _GpuStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Gpu.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _gpuMethodCreateOffscreenGles2ContextName:
        var params = _GpuCreateOffscreenGles2ContextParams.deserialize(
            message.payload);
        _impl.createOffscreenGles2Context(params.gles2Client);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Gpu get impl => _impl;
  set impl(Gpu d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GpuStubControl($superString)";
  }

  int get version => 0;
}

class GpuStub
    extends bindings.Stub<Gpu>
    implements Gpu,
               GpuInterface,
               GpuInterfaceRequest {
  GpuStub.unbound([Gpu impl])
      : super(new _GpuStubControl.unbound(impl));

  GpuStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Gpu impl])
      : super(new _GpuStubControl.fromEndpoint(endpoint, impl));

  GpuStub.fromHandle(
      core.MojoHandle handle, [Gpu impl])
      : super(new _GpuStubControl.fromHandle(handle, impl));

  static GpuStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GpuStub"));
    return new GpuStub.fromEndpoint(endpoint);
  }


  void createOffscreenGles2Context(command_buffer_mojom.CommandBufferInterfaceRequest gles2Client) {
    return impl.createOffscreenGles2Context(gles2Client);
  }
}



