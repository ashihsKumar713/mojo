// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library context_provider_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/command_buffer.mojom.dart' as command_buffer_mojom;
import 'package:mojo_services/mojo/viewport_parameter_listener.mojom.dart' as viewport_parameter_listener_mojom;



class _ContextProviderCreateParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  viewport_parameter_listener_mojom.ViewportParameterListenerInterface viewportParameterListener = null;

  _ContextProviderCreateParams() : super(kVersions.last.size);

  _ContextProviderCreateParams.init(
    viewport_parameter_listener_mojom.ViewportParameterListenerInterface this.viewportParameterListener
  ) : super(kVersions.last.size);

  static _ContextProviderCreateParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ContextProviderCreateParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ContextProviderCreateParams result = new _ContextProviderCreateParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.viewportParameterListener = decoder0.decodeServiceInterface(8, true, viewport_parameter_listener_mojom.ViewportParameterListenerProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ContextProviderCreateParams";
    String fieldName;
    try {
      fieldName = "viewportParameterListener";
      encoder0.encodeInterface(viewportParameterListener, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ContextProviderCreateParams("
           "viewportParameterListener: $viewportParameterListener" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class ContextProviderCreateResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  command_buffer_mojom.CommandBufferInterface gles2Client = null;

  ContextProviderCreateResponseParams() : super(kVersions.last.size);

  ContextProviderCreateResponseParams.init(
    command_buffer_mojom.CommandBufferInterface this.gles2Client
  ) : super(kVersions.last.size);

  static ContextProviderCreateResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ContextProviderCreateResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ContextProviderCreateResponseParams result = new ContextProviderCreateResponseParams();
    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.gles2Client = decoder0.decodeServiceInterface(8, true, command_buffer_mojom.CommandBufferProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ContextProviderCreateResponseParams";
    String fieldName;
    try {
      fieldName = "gles2Client";
      encoder0.encodeInterface(gles2Client, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ContextProviderCreateResponseParams("
           "gles2Client: $gles2Client" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _contextProviderMethodCreateName = 0;

class _ContextProviderServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class ContextProvider {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ContextProviderServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ContextProviderProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ContextProviderProxy p = new ContextProviderProxy.unbound();
    String name = serviceName ?? ContextProvider.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void create(viewport_parameter_listener_mojom.ViewportParameterListenerInterface viewportParameterListener,void callback(command_buffer_mojom.CommandBufferInterface gles2Client));
}

abstract class ContextProviderInterface
    implements bindings.MojoInterface<ContextProvider>,
               ContextProvider {
  factory ContextProviderInterface([ContextProvider impl]) =>
      new ContextProviderStub.unbound(impl);

  factory ContextProviderInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [ContextProvider impl]) =>
      new ContextProviderStub.fromEndpoint(endpoint, impl);

  factory ContextProviderInterface.fromMock(
      ContextProvider mock) =>
      new ContextProviderProxy.fromMock(mock);
}

abstract class ContextProviderInterfaceRequest
    implements bindings.MojoInterface<ContextProvider>,
               ContextProvider {
  factory ContextProviderInterfaceRequest() =>
      new ContextProviderProxy.unbound();
}

class _ContextProviderProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<ContextProvider> {
  ContextProvider impl;

  _ContextProviderProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ContextProviderProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ContextProviderProxyControl.unbound() : super.unbound();

  String get serviceName => ContextProvider.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _contextProviderMethodCreateName:
        Function callback = getCallback(message);
        if (callback != null) {
          var r = ContextProviderCreateResponseParams.deserialize(
              message.payload);
          callback(r.gles2Client );
        }
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ContextProviderProxyControl($superString)";
  }
}

class ContextProviderProxy
    extends bindings.Proxy<ContextProvider>
    implements ContextProvider,
               ContextProviderInterface,
               ContextProviderInterfaceRequest {
  ContextProviderProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ContextProviderProxyControl.fromEndpoint(endpoint));

  ContextProviderProxy.fromHandle(core.MojoHandle handle)
      : super(new _ContextProviderProxyControl.fromHandle(handle));

  ContextProviderProxy.unbound()
      : super(new _ContextProviderProxyControl.unbound());

  factory ContextProviderProxy.fromMock(ContextProvider mock) {
    ContextProviderProxy newMockedProxy =
        new ContextProviderProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ContextProviderProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ContextProviderProxy"));
    return new ContextProviderProxy.fromEndpoint(endpoint);
  }


  void create(viewport_parameter_listener_mojom.ViewportParameterListenerInterface viewportParameterListener,void callback(command_buffer_mojom.CommandBufferInterface gles2Client)) {
    if (impl != null) {
      impl.create(viewportParameterListener,callback ?? bindings.DoNothingFunction.fn);
      return;
    }
    var params = new _ContextProviderCreateParams();
    params.viewportParameterListener = viewportParameterListener;
    Function zonedCallback;
    if ((callback == null) || identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((command_buffer_mojom.CommandBufferInterface gles2Client) {
        z.bindCallback(() {
          callback(gles2Client);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _contextProviderMethodCreateName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _ContextProviderStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<ContextProvider> {
  ContextProvider _impl;

  _ContextProviderStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ContextProvider impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ContextProviderStubControl.fromHandle(
      core.MojoHandle handle, [ContextProvider impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ContextProviderStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => ContextProvider.serviceName;


  Function _contextProviderCreateResponseParamsResponder(
      int requestId) {
  return (command_buffer_mojom.CommandBufferInterface gles2Client) {
      var result = new ContextProviderCreateResponseParams();
      result.gles2Client = gles2Client;
      sendResponse(buildResponseWithId(
          result,
          _contextProviderMethodCreateName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _contextProviderMethodCreateName:
        var params = _ContextProviderCreateParams.deserialize(
            message.payload);
        _impl.create(params.viewportParameterListener, _contextProviderCreateResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  ContextProvider get impl => _impl;
  set impl(ContextProvider d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ContextProviderStubControl($superString)";
  }

  int get version => 0;
}

class ContextProviderStub
    extends bindings.Stub<ContextProvider>
    implements ContextProvider,
               ContextProviderInterface,
               ContextProviderInterfaceRequest {
  ContextProviderStub.unbound([ContextProvider impl])
      : super(new _ContextProviderStubControl.unbound(impl));

  ContextProviderStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ContextProvider impl])
      : super(new _ContextProviderStubControl.fromEndpoint(endpoint, impl));

  ContextProviderStub.fromHandle(
      core.MojoHandle handle, [ContextProvider impl])
      : super(new _ContextProviderStubControl.fromHandle(handle, impl));

  static ContextProviderStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ContextProviderStub"));
    return new ContextProviderStub.fromEndpoint(endpoint);
  }


  void create(viewport_parameter_listener_mojom.ViewportParameterListenerInterface viewportParameterListener,void callback(command_buffer_mojom.CommandBufferInterface gles2Client)) {
    return impl.create(viewportParameterListener,callback);
  }
}



